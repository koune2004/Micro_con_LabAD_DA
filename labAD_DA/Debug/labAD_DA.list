
labAD_DA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e8c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050a4  080050a4  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  080050a4  080050a4  000150a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050ac  080050ac  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050ac  080050ac  000150ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050b0  080050b0  000150b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080050b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000030  080050e4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080050e4  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001198f  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022d6  00000000  00000000  00031a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00033d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af0  00000000  00000000  00034b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026671  00000000  00000000  00035638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010cc7  00000000  00000000  0005bca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000feed3  00000000  00000000  0006c970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c10  00000000  00000000  0016b844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0016f454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000030 	.word	0x20000030
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800504c 	.word	0x0800504c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000034 	.word	0x20000034
 8000214:	0800504c 	.word	0x0800504c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fba7 	bl	8000c6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f820 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f966 	bl	80007f0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f91a 	bl	800075c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000528:	f000 f866 	bl	80005f8 <MX_ADC1_Init>
  MX_DAC1_Init();
 800052c:	f000 f8dc 	bl	80006e8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000530:	217f      	movs	r1, #127	; 0x7f
 8000532:	4809      	ldr	r0, [pc, #36]	; (8000558 <main+0x44>)
 8000534:	f002 f8a8 	bl	8002688 <HAL_ADCEx_Calibration_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800053c:	2200      	movs	r2, #0
 800053e:	2100      	movs	r1, #0
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <main+0x48>)
 8000542:	f002 fb8f 	bl	8002c64 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000546:	2100      	movs	r1, #0
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <main+0x48>)
 800054a:	f002 fb38 	bl	8002bbe <HAL_DAC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ADC_Read_blocking();
 800054e:	f000 f9bd 	bl	80008cc <ADC_Read_blocking>
	DAC_Update();
 8000552:	f000 f9e9 	bl	8000928 <DAC_Update>
	ADC_Read_blocking();
 8000556:	e7fa      	b.n	800054e <main+0x3a>
 8000558:	2000004c 	.word	0x2000004c
 800055c:	200000b8 	.word	0x200000b8

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	2238      	movs	r2, #56	; 0x38
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fd40 	bl	8004ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000582:	2000      	movs	r0, #0
 8000584:	f002 fefc 	bl	8003380 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2340      	movs	r3, #64	; 0x40
 8000594:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800059e:	2304      	movs	r3, #4
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a2:	2355      	movs	r3, #85	; 0x55
 80005a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 ff96 	bl	80034e8 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c2:	f000 f9d1 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2303      	movs	r3, #3
 80005cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2104      	movs	r1, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fa9a 	bl	8003b18 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ea:	f000 f9bd 	bl	8000968 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	; 0x30
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2220      	movs	r2, #32
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f004 fcef 	bl	8004ff4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000616:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <MX_ADC1_Init+0xe8>)
 8000618:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800061e:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <MX_ADC1_Init+0xe8>)
 8000620:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <MX_ADC1_Init+0xe8>)
 8000628:	2208      	movs	r2, #8
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_ADC1_Init+0xe8>)
 8000640:	2204      	movs	r2, #4
 8000642:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <MX_ADC1_Init+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <MX_ADC1_Init+0xe8>)
 8000652:	2201      	movs	r2, #1
 8000654:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <MX_ADC1_Init+0xe8>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_ADC1_Init+0xe8>)
 8000666:	2200      	movs	r2, #0
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_ADC1_Init+0xe8>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_ADC1_Init+0xe8>)
 8000674:	2200      	movs	r2, #0
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_ADC1_Init+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000680:	4817      	ldr	r0, [pc, #92]	; (80006e0 <MX_ADC1_Init+0xe8>)
 8000682:	f000 fe03 	bl	800128c <HAL_ADC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800068c:	f000 f96c 	bl	8000968 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000698:	4619      	mov	r1, r3
 800069a:	4811      	ldr	r0, [pc, #68]	; (80006e0 <MX_ADC1_Init+0xe8>)
 800069c:	f002 f856 	bl	800274c <HAL_ADCEx_MultiModeConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006a6:	f000 f95f 	bl	8000968 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_ADC1_Init+0xec>)
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ae:	2306      	movs	r3, #6
 80006b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b6:	237f      	movs	r3, #127	; 0x7f
 80006b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ba:	2304      	movs	r3, #4
 80006bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <MX_ADC1_Init+0xe8>)
 80006c8:	f001 f9ce 	bl	8001a68 <HAL_ADC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006d2:	f000 f949 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	3730      	adds	r7, #48	; 0x30
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000004c 	.word	0x2000004c
 80006e4:	04300002 	.word	0x04300002

080006e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2230      	movs	r2, #48	; 0x30
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 fc7d 	bl	8004ff4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_DAC1_Init+0x6c>)
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <MX_DAC1_Init+0x70>)
 80006fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000700:	4814      	ldr	r0, [pc, #80]	; (8000754 <MX_DAC1_Init+0x6c>)
 8000702:	f002 fa3a 	bl	8002b7a <HAL_DAC_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800070c:	f000 f92c 	bl	8000968 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000710:	2302      	movs	r3, #2
 8000712:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800072c:	2301      	movs	r3, #1
 800072e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <MX_DAC1_Init+0x6c>)
 800073c:	f002 faba 	bl	8002cb4 <HAL_DAC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000746:	f000 f90f 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3730      	adds	r7, #48	; 0x30
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000b8 	.word	0x200000b8
 8000758:	50000800 	.word	0x50000800

0800075c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000762:	4a22      	ldr	r2, [pc, #136]	; (80007ec <MX_LPUART1_UART_Init+0x90>)
 8000764:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800079e:	4812      	ldr	r0, [pc, #72]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 80007a0:	f003 fe24 	bl	80043ec <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007aa:	f000 f8dd 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 80007b2:	f004 fb55 	bl	8004e60 <HAL_UARTEx_SetTxFifoThreshold>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007bc:	f000 f8d4 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	f004 fb8a 	bl	8004edc <HAL_UARTEx_SetRxFifoThreshold>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007ce:	f000 f8cb 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 80007d4:	f004 fb0b 	bl	8004dee <HAL_UARTEx_DisableFifoMode>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007de:	f000 f8c3 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000cc 	.word	0x200000cc
 80007ec:	40008000 	.word	0x40008000

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <MX_GPIO_Init+0xd4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a2e      	ldr	r2, [pc, #184]	; (80008c4 <MX_GPIO_Init+0xd4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <MX_GPIO_Init+0xd4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <MX_GPIO_Init+0xd4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <MX_GPIO_Init+0xd4>)
 8000824:	f043 0320 	orr.w	r3, r3, #32
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <MX_GPIO_Init+0xd4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0320 	and.w	r3, r3, #32
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_GPIO_Init+0xd4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a22      	ldr	r2, [pc, #136]	; (80008c4 <MX_GPIO_Init+0xd4>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_GPIO_Init+0xd4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_GPIO_Init+0xd4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_GPIO_Init+0xd4>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_GPIO_Init+0xd4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2120      	movs	r1, #32
 800086a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086e:	f002 fd4b 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000878:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	480f      	ldr	r0, [pc, #60]	; (80008c8 <MX_GPIO_Init+0xd8>)
 800088a:	f002 fbbb 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800088e:	2320      	movs	r3, #32
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a8:	f002 fbac 	bl	8003004 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	2028      	movs	r0, #40	; 0x28
 80008b2:	f002 f92e 	bl	8002b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b6:	2028      	movs	r0, #40	; 0x28
 80008b8:	f002 f945 	bl	8002b46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000800 	.word	0x48000800

080008cc <ADC_Read_blocking>:

/* USER CODE BEGIN 4 */
void ADC_Read_blocking()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	static uint32_t TimeStamp = 0;
	if( HAL_GetTick()<TimeStamp) return;
 80008d0:	f000 fa30 	bl	8000d34 <HAL_GetTick>
 80008d4:	4602      	mov	r2, r0
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <ADC_Read_blocking+0x50>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d31c      	bcc.n	8000918 <ADC_Read_blocking+0x4c>
	TimeStamp = HAL_GetTick()+500;
 80008de:	f000 fa29 	bl	8000d34 <HAL_GetTick>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <ADC_Read_blocking+0x50>)
 80008ea:	6013      	str	r3, [r2, #0]

	HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel.Config);
 80008ec:	490c      	ldr	r1, [pc, #48]	; (8000920 <ADC_Read_blocking+0x54>)
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <ADC_Read_blocking+0x58>)
 80008f0:	f001 f8ba 	bl	8001a68 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <ADC_Read_blocking+0x58>)
 80008f6:	f000 fe8b 	bl	8001610 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80008fa:	2164      	movs	r1, #100	; 0x64
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <ADC_Read_blocking+0x58>)
 80008fe:	f000 ff9f 	bl	8001840 <HAL_ADC_PollForConversion>
	ADC1_Channel.data = HAL_ADC_GetValue(&hadc1);
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <ADC_Read_blocking+0x58>)
 8000904:	f001 f8a2 	bl	8001a4c <HAL_ADC_GetValue>
 8000908:	4603      	mov	r3, r0
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <ADC_Read_blocking+0x54>)
 800090e:	841a      	strh	r2, [r3, #32]
	HAL_ADC_Stop(&hadc1);
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <ADC_Read_blocking+0x58>)
 8000912:	f000 ff61 	bl	80017d8 <HAL_ADC_Stop>
 8000916:	e000      	b.n	800091a <ADC_Read_blocking+0x4e>
	if( HAL_GetTick()<TimeStamp) return;
 8000918:	bf00      	nop
}
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000160 	.word	0x20000160
 8000920:	20000000 	.word	0x20000000
 8000924:	2000004c 	.word	0x2000004c

08000928 <DAC_Update>:
void DAC_Update()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	static uint32_t timeStamp =0;
	if(HAL_GetTick()>timeStamp)
 800092c:	f000 fa02 	bl	8000d34 <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <DAC_Update+0x34>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	429a      	cmp	r2, r3
 8000938:	d90d      	bls.n	8000956 <DAC_Update+0x2e>
	{
		timeStamp = HAL_GetTick()+500;
 800093a:	f000 f9fb 	bl	8000d34 <HAL_GetTick>
 800093e:	4603      	mov	r3, r0
 8000940:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000944:	4a05      	ldr	r2, [pc, #20]	; (800095c <DAC_Update+0x34>)
 8000946:	6013      	str	r3, [r2, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_Output);
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <DAC_Update+0x38>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <DAC_Update+0x3c>)
 8000952:	f002 f987 	bl	8002c64 <HAL_DAC_SetValue>
	}
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000164 	.word	0x20000164
 8000960:	2000015c 	.word	0x2000015c
 8000964:	200000b8 	.word	0x200000b8

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	; 0x58
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009aa:	f002 fd8d 	bl	80034c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b09e      	sub	sp, #120	; 0x78
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	2254      	movs	r2, #84	; 0x54
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fb09 	bl	8004ff4 <memset>
  if(hadc->Instance==ADC1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009ea:	d134      	bne.n	8000a56 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009f6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 faa7 	bl	8003f50 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a08:	f7ff ffae 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_ADC_MspInit+0xa4>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <HAL_ADC_MspInit+0xa4>)
 8000a12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_ADC_MspInit+0xa4>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_ADC_MspInit+0xa4>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <HAL_ADC_MspInit+0xa4>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_ADC_MspInit+0xa4>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a40:	2303      	movs	r3, #3
 8000a42:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f002 fad7 	bl	8003004 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3778      	adds	r7, #120	; 0x78
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <HAL_DAC_MspInit+0x74>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d124      	bne.n	8000ad0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_DAC_MspInit+0x78>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <HAL_DAC_MspInit+0x78>)
 8000a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_DAC_MspInit+0x78>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_DAC_MspInit+0x78>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_DAC_MspInit+0x78>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_DAC_MspInit+0x78>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ab6:	2310      	movs	r3, #16
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aba:	2303      	movs	r3, #3
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f002 fa9a 	bl	8003004 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	50000800 	.word	0x50000800
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b09e      	sub	sp, #120	; 0x78
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2254      	movs	r2, #84	; 0x54
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 fa77 	bl	8004ff4 <memset>
  if(huart->Instance==LPUART1)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <HAL_UART_MspInit+0xa8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d136      	bne.n	8000b7e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b10:	2320      	movs	r3, #32
 8000b12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 fa17 	bl	8003f50 <HAL_RCCEx_PeriphCLKConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b28:	f7ff ff1e 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_UART_MspInit+0xac>)
 8000b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b30:	4a16      	ldr	r2, [pc, #88]	; (8000b8c <HAL_UART_MspInit+0xac>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <HAL_UART_MspInit+0xac>)
 8000b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_UART_MspInit+0xac>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_UART_MspInit+0xac>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_UART_MspInit+0xac>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f002 fa43 	bl	8003004 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3778      	adds	r7, #120	; 0x78
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40008000 	.word	0x40008000
 8000b8c:	40021000 	.word	0x40021000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f898 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000be8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bec:	f002 fba4 	bl	8003338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1e:	490e      	ldr	r1, [pc, #56]	; (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c20:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c34:	4c0b      	ldr	r4, [pc, #44]	; (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c42:	f7ff ffd7 	bl	8000bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f004 f9dd 	bl	8005004 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4a:	f7ff fc63 	bl	8000514 <main>

08000c4e <LoopForever>:

LoopForever:
    b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   r0, =_estack
 8000c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000c5c:	080050b4 	.word	0x080050b4
  ldr r2, =_sbss
 8000c60:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000c64:	2000016c 	.word	0x2000016c

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>

08000c6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f001 ff41 	bl	8002afc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f80e 	bl	8000c9c <HAL_InitTick>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e001      	b.n	8000c90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c8c:	f7ff fe72 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c90:	79fb      	ldrb	r3, [r7, #7]

}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_InitTick+0x68>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d022      	beq.n	8000cf6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_InitTick+0x6c>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <HAL_InitTick+0x68>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 ff4c 	bl	8002b62 <HAL_SYSTICK_Config>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10f      	bne.n	8000cf0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b0f      	cmp	r3, #15
 8000cd4:	d809      	bhi.n	8000cea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	f04f 30ff 	mov.w	r0, #4294967295
 8000cde:	f001 ff18 	bl	8002b12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_InitTick+0x70>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	e007      	b.n	8000cfa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	e004      	b.n	8000cfa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
 8000cf4:	e001      	b.n	8000cfa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000002c 	.word	0x2000002c
 8000d08:	20000024 	.word	0x20000024
 8000d0c:	20000028 	.word	0x20000028

08000d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_IncTick+0x1c>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_IncTick+0x20>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a03      	ldr	r2, [pc, #12]	; (8000d2c <HAL_IncTick+0x1c>)
 8000d20:	6013      	str	r3, [r2, #0]
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	20000168 	.word	0x20000168
 8000d30:	2000002c 	.word	0x2000002c

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000168 	.word	0x20000168

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d54:	f7ff ffee 	bl	8000d34 <HAL_GetTick>
 8000d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d64:	d004      	beq.n	8000d70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_Delay+0x40>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d70:	bf00      	nop
 8000d72:	f7ff ffdf 	bl	8000d34 <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d8f7      	bhi.n	8000d72 <HAL_Delay+0x26>
  {
  }
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000002c 	.word	0x2000002c

08000d90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	431a      	orrs	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	609a      	str	r2, [r3, #8]
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	609a      	str	r2, [r3, #8]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3360      	adds	r3, #96	; 0x60
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <LL_ADC_SetOffset+0x44>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	4313      	orrs	r3, r2
 8000e28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e30:	bf00      	nop
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	03fff000 	.word	0x03fff000

08000e40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3360      	adds	r3, #96	; 0x60
 8000e4e:	461a      	mov	r2, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3360      	adds	r3, #96	; 0x60
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	431a      	orrs	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e96:	bf00      	nop
 8000e98:	371c      	adds	r7, #28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b087      	sub	sp, #28
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3360      	adds	r3, #96	; 0x60
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000ecc:	bf00      	nop
 8000ece:	371c      	adds	r7, #28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	3360      	adds	r3, #96	; 0x60
 8000ee8:	461a      	mov	r2, r3
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	431a      	orrs	r2, r3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f02:	bf00      	nop
 8000f04:	371c      	adds	r7, #28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	615a      	str	r2, [r3, #20]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b087      	sub	sp, #28
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3330      	adds	r3, #48	; 0x30
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	4413      	add	r3, r2
 8000f78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f003 031f 	and.w	r3, r3, #31
 8000f84:	211f      	movs	r1, #31
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	0e9b      	lsrs	r3, r3, #26
 8000f92:	f003 011f 	and.w	r1, r3, #31
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b087      	sub	sp, #28
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3314      	adds	r3, #20
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	0e5b      	lsrs	r3, r3, #25
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	4413      	add	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	0d1b      	lsrs	r3, r3, #20
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	2107      	movs	r1, #7
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	0d1b      	lsrs	r3, r3, #20
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ffc:	bf00      	nop
 8000ffe:	371c      	adds	r7, #28
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d10a      	bne.n	8001032 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001028:	431a      	orrs	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001030:	e00a      	b.n	8001048 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800103e:	43db      	mvns	r3, r3
 8001040:	401a      	ands	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	407f0000 	.word	0x407f0000

08001058 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 031f 	and.w	r3, r3, #31
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6093      	str	r3, [r2, #8]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010c8:	d101      	bne.n	80010ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001118:	d101      	bne.n	800111e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800113c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001168:	f043 0202 	orr.w	r2, r3, #2
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b01      	cmp	r3, #1
 800118e:	d101      	bne.n	8001194 <LL_ADC_IsEnabled+0x18>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <LL_ADC_IsEnabled+0x1a>
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d101      	bne.n	80011ba <LL_ADC_IsDisableOngoing+0x18>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <LL_ADC_IsDisableOngoing+0x1a>
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011dc:	f043 0204 	orr.w	r2, r3, #4
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001204:	f043 0210 	orr.w	r2, r3, #16
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b04      	cmp	r3, #4
 800122a:	d101      	bne.n	8001230 <LL_ADC_REG_IsConversionOngoing+0x18>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800124e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001252:	f043 0220 	orr.w	r2, r3, #32
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b08      	cmp	r3, #8
 8001278:	d101      	bne.n	800127e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e1af      	b.n	8001606 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fb81 	bl	80009bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fef1 	bl	80010b4 <LL_ADC_IsDeepPowerDownEnabled>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fed7 	bl	8001090 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff0c 	bl	8001104 <LL_ADC_IsInternalRegulatorEnabled>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d115      	bne.n	800131e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fef0 	bl	80010dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012fc:	4b9f      	ldr	r3, [pc, #636]	; (800157c <HAL_ADC_Init+0x2f0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	4a9f      	ldr	r2, [pc, #636]	; (8001580 <HAL_ADC_Init+0x2f4>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	3301      	adds	r3, #1
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001310:	e002      	b.n	8001318 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	3b01      	subs	r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f9      	bne.n	8001312 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff feee 	bl	8001104 <LL_ADC_IsInternalRegulatorEnabled>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10d      	bne.n	800134a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	f043 0210 	orr.w	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff62 	bl	8001218 <LL_ADC_REG_IsConversionOngoing>
 8001354:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b00      	cmp	r3, #0
 8001360:	f040 8148 	bne.w	80015f4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 8144 	bne.w	80015f4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001370:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001374:	f043 0202 	orr.w	r2, r3, #2
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fefb 	bl	800117c <LL_ADC_IsEnabled>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d141      	bne.n	8001410 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001394:	d004      	beq.n	80013a0 <HAL_ADC_Init+0x114>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a7a      	ldr	r2, [pc, #488]	; (8001584 <HAL_ADC_Init+0x2f8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d10f      	bne.n	80013c0 <HAL_ADC_Init+0x134>
 80013a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80013a4:	f7ff feea 	bl	800117c <LL_ADC_IsEnabled>
 80013a8:	4604      	mov	r4, r0
 80013aa:	4876      	ldr	r0, [pc, #472]	; (8001584 <HAL_ADC_Init+0x2f8>)
 80013ac:	f7ff fee6 	bl	800117c <LL_ADC_IsEnabled>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4323      	orrs	r3, r4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	e012      	b.n	80013e6 <HAL_ADC_Init+0x15a>
 80013c0:	4871      	ldr	r0, [pc, #452]	; (8001588 <HAL_ADC_Init+0x2fc>)
 80013c2:	f7ff fedb 	bl	800117c <LL_ADC_IsEnabled>
 80013c6:	4604      	mov	r4, r0
 80013c8:	4870      	ldr	r0, [pc, #448]	; (800158c <HAL_ADC_Init+0x300>)
 80013ca:	f7ff fed7 	bl	800117c <LL_ADC_IsEnabled>
 80013ce:	4603      	mov	r3, r0
 80013d0:	431c      	orrs	r4, r3
 80013d2:	486f      	ldr	r0, [pc, #444]	; (8001590 <HAL_ADC_Init+0x304>)
 80013d4:	f7ff fed2 	bl	800117c <LL_ADC_IsEnabled>
 80013d8:	4603      	mov	r3, r0
 80013da:	4323      	orrs	r3, r4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d012      	beq.n	8001410 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f2:	d004      	beq.n	80013fe <HAL_ADC_Init+0x172>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a62      	ldr	r2, [pc, #392]	; (8001584 <HAL_ADC_Init+0x2f8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_ADC_Init+0x176>
 80013fe:	4a65      	ldr	r2, [pc, #404]	; (8001594 <HAL_ADC_Init+0x308>)
 8001400:	e000      	b.n	8001404 <HAL_ADC_Init+0x178>
 8001402:	4a65      	ldr	r2, [pc, #404]	; (8001598 <HAL_ADC_Init+0x30c>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4619      	mov	r1, r3
 800140a:	4610      	mov	r0, r2
 800140c:	f7ff fcc0 	bl	8000d90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7f5b      	ldrb	r3, [r3, #29]
 8001414:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800141a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001420:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001426:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800142e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800143a:	2b01      	cmp	r3, #1
 800143c:	d106      	bne.n	800144c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001442:	3b01      	subs	r3, #1
 8001444:	045b      	lsls	r3, r3, #17
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	2b00      	cmp	r3, #0
 8001452:	d009      	beq.n	8001468 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	4b4b      	ldr	r3, [pc, #300]	; (800159c <HAL_ADC_Init+0x310>)
 8001470:	4013      	ands	r3, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	69b9      	ldr	r1, [r7, #24]
 8001478:	430b      	orrs	r3, r1
 800147a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff febe 	bl	8001218 <LL_ADC_REG_IsConversionOngoing>
 800149c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fedf 	bl	8001266 <LL_ADC_INJ_IsConversionOngoing>
 80014a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d17f      	bne.n	80015b0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d17c      	bne.n	80015b0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014c2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014d2:	f023 0302 	bic.w	r3, r3, #2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	69b9      	ldr	r1, [r7, #24]
 80014dc:	430b      	orrs	r3, r1
 80014de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d017      	beq.n	8001518 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001500:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001504:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6911      	ldr	r1, [r2, #16]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	430b      	orrs	r3, r1
 8001512:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001516:	e013      	b.n	8001540 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001526:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001538:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800153c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001546:	2b01      	cmp	r3, #1
 8001548:	d12a      	bne.n	80015a0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001560:	4311      	orrs	r1, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001566:	4311      	orrs	r1, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800156c:	430a      	orrs	r2, r1
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0201 	orr.w	r2, r2, #1
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	e019      	b.n	80015b0 <HAL_ADC_Init+0x324>
 800157c:	20000024 	.word	0x20000024
 8001580:	053e2d63 	.word	0x053e2d63
 8001584:	50000100 	.word	0x50000100
 8001588:	50000400 	.word	0x50000400
 800158c:	50000500 	.word	0x50000500
 8001590:	50000600 	.word	0x50000600
 8001594:	50000300 	.word	0x50000300
 8001598:	50000700 	.word	0x50000700
 800159c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691a      	ldr	r2, [r3, #16]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d10c      	bne.n	80015d2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f023 010f 	bic.w	r1, r3, #15
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	1e5a      	subs	r2, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	631a      	str	r2, [r3, #48]	; 0x30
 80015d0:	e007      	b.n	80015e2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 020f 	bic.w	r2, r2, #15
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e6:	f023 0303 	bic.w	r3, r3, #3
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80015f2:	e007      	b.n	8001604 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f8:	f043 0210 	orr.w	r2, r3, #16
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001604:	7ffb      	ldrb	r3, [r7, #31]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}
 800160e:	bf00      	nop

08001610 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001620:	d004      	beq.n	800162c <HAL_ADC_Start+0x1c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a67      	ldr	r2, [pc, #412]	; (80017c4 <HAL_ADC_Start+0x1b4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_ADC_Start+0x20>
 800162c:	4b66      	ldr	r3, [pc, #408]	; (80017c8 <HAL_ADC_Start+0x1b8>)
 800162e:	e000      	b.n	8001632 <HAL_ADC_Start+0x22>
 8001630:	4b66      	ldr	r3, [pc, #408]	; (80017cc <HAL_ADC_Start+0x1bc>)
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fd10 	bl	8001058 <LL_ADC_GetMultimode>
 8001638:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fdea 	bl	8001218 <LL_ADC_REG_IsConversionOngoing>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 80b4 	bne.w	80017b4 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_ADC_Start+0x4a>
 8001656:	2302      	movs	r3, #2
 8001658:	e0af      	b.n	80017ba <HAL_ADC_Start+0x1aa>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 fefc 	bl	8002460 <ADC_Enable>
 8001668:	4603      	mov	r3, r0
 800166a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f040 809b 	bne.w	80017aa <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a4d      	ldr	r2, [pc, #308]	; (80017c4 <HAL_ADC_Start+0x1b4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d009      	beq.n	80016a6 <HAL_ADC_Start+0x96>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_ADC_Start+0x1c0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d002      	beq.n	80016a2 <HAL_ADC_Start+0x92>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	e003      	b.n	80016aa <HAL_ADC_Start+0x9a>
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_ADC_Start+0x1c4>)
 80016a4:	e001      	b.n	80016aa <HAL_ADC_Start+0x9a>
 80016a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d002      	beq.n	80016b8 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d0:	d106      	bne.n	80016e0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	f023 0206 	bic.w	r2, r3, #6
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	661a      	str	r2, [r3, #96]	; 0x60
 80016de:	e002      	b.n	80016e6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	221c      	movs	r2, #28
 80016ec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a32      	ldr	r2, [pc, #200]	; (80017c4 <HAL_ADC_Start+0x1b4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d009      	beq.n	8001714 <HAL_ADC_Start+0x104>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a32      	ldr	r2, [pc, #200]	; (80017d0 <HAL_ADC_Start+0x1c0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d002      	beq.n	8001710 <HAL_ADC_Start+0x100>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	e003      	b.n	8001718 <HAL_ADC_Start+0x108>
 8001710:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_ADC_Start+0x1c4>)
 8001712:	e001      	b.n	8001718 <HAL_ADC_Start+0x108>
 8001714:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	4293      	cmp	r3, r2
 800171e:	d008      	beq.n	8001732 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	2b05      	cmp	r3, #5
 800172a:	d002      	beq.n	8001732 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	2b09      	cmp	r3, #9
 8001730:	d114      	bne.n	800175c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001748:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fd37 	bl	80011c8 <LL_ADC_REG_StartConversion>
 800175a:	e02d      	b.n	80017b8 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001760:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <HAL_ADC_Start+0x1b4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d009      	beq.n	8001786 <HAL_ADC_Start+0x176>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a16      	ldr	r2, [pc, #88]	; (80017d0 <HAL_ADC_Start+0x1c0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d002      	beq.n	8001782 <HAL_ADC_Start+0x172>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	e003      	b.n	800178a <HAL_ADC_Start+0x17a>
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_ADC_Start+0x1c4>)
 8001784:	e001      	b.n	800178a <HAL_ADC_Start+0x17a>
 8001786:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800178a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00f      	beq.n	80017b8 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80017a8:	e006      	b.n	80017b8 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80017b2:	e001      	b.n	80017b8 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017b4:	2302      	movs	r3, #2
 80017b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	50000100 	.word	0x50000100
 80017c8:	50000300 	.word	0x50000300
 80017cc:	50000700 	.word	0x50000700
 80017d0:	50000500 	.word	0x50000500
 80017d4:	50000400 	.word	0x50000400

080017d8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_ADC_Stop+0x16>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e023      	b.n	8001836 <HAL_ADC_Stop+0x5e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80017f6:	2103      	movs	r1, #3
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fd75 	bl	80022e8 <ADC_ConversionStop>
 80017fe:	4603      	mov	r3, r0
 8001800:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d111      	bne.n	800182c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 fe8b 	bl	8002524 <ADC_Disable>
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001834:	7bfb      	ldrb	r3, [r7, #15]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001852:	d004      	beq.n	800185e <HAL_ADC_PollForConversion+0x1e>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a77      	ldr	r2, [pc, #476]	; (8001a38 <HAL_ADC_PollForConversion+0x1f8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_ADC_PollForConversion+0x22>
 800185e:	4b77      	ldr	r3, [pc, #476]	; (8001a3c <HAL_ADC_PollForConversion+0x1fc>)
 8001860:	e000      	b.n	8001864 <HAL_ADC_PollForConversion+0x24>
 8001862:	4b77      	ldr	r3, [pc, #476]	; (8001a40 <HAL_ADC_PollForConversion+0x200>)
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fbf7 	bl	8001058 <LL_ADC_GetMultimode>
 800186a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	2b08      	cmp	r3, #8
 8001872:	d102      	bne.n	800187a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001874:	2308      	movs	r3, #8
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	e037      	b.n	80018ea <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2b05      	cmp	r3, #5
 8001884:	d002      	beq.n	800188c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b09      	cmp	r3, #9
 800188a:	d111      	bne.n	80018b0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189e:	f043 0220 	orr.w	r2, r3, #32
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0c1      	b.n	8001a2e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80018aa:	2304      	movs	r3, #4
 80018ac:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018ae:	e01c      	b.n	80018ea <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b8:	d004      	beq.n	80018c4 <HAL_ADC_PollForConversion+0x84>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a5e      	ldr	r2, [pc, #376]	; (8001a38 <HAL_ADC_PollForConversion+0x1f8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_ADC_PollForConversion+0x88>
 80018c4:	4b5d      	ldr	r3, [pc, #372]	; (8001a3c <HAL_ADC_PollForConversion+0x1fc>)
 80018c6:	e000      	b.n	80018ca <HAL_ADC_PollForConversion+0x8a>
 80018c8:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <HAL_ADC_PollForConversion+0x200>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fbd2 	bl	8001074 <LL_ADC_GetMultiDMATransfer>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018da:	f043 0220 	orr.w	r2, r3, #32
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0a3      	b.n	8001a2e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80018e6:	2304      	movs	r3, #4
 80018e8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018ea:	f7ff fa23 	bl	8000d34 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018f0:	e021      	b.n	8001936 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f8:	d01d      	beq.n	8001936 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018fa:	f7ff fa1b 	bl	8000d34 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d302      	bcc.n	8001910 <HAL_ADC_PollForConversion+0xd0>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d112      	bne.n	8001936 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10b      	bne.n	8001936 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	f043 0204 	orr.w	r2, r3, #4
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e07b      	b.n	8001a2e <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0d6      	beq.n	80018f2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001948:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff faed 	bl	8000f34 <LL_ADC_REG_IsTriggerSourceSWStart>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01c      	beq.n	800199a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7f5b      	ldrb	r3, [r3, #29]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d118      	bne.n	800199a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b08      	cmp	r3, #8
 8001974:	d111      	bne.n	800199a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d105      	bne.n	800199a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_ADC_PollForConversion+0x1f8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d009      	beq.n	80019b8 <HAL_ADC_PollForConversion+0x178>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <HAL_ADC_PollForConversion+0x204>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d002      	beq.n	80019b4 <HAL_ADC_PollForConversion+0x174>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	e003      	b.n	80019bc <HAL_ADC_PollForConversion+0x17c>
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_ADC_PollForConversion+0x208>)
 80019b6:	e001      	b.n	80019bc <HAL_ADC_PollForConversion+0x17c>
 80019b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d008      	beq.n	80019d6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d002      	beq.n	80019d6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2b09      	cmp	r3, #9
 80019d4:	d104      	bne.n	80019e0 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	e014      	b.n	8001a0a <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <HAL_ADC_PollForConversion+0x1f8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d009      	beq.n	80019fe <HAL_ADC_PollForConversion+0x1be>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a15      	ldr	r2, [pc, #84]	; (8001a44 <HAL_ADC_PollForConversion+0x204>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d002      	beq.n	80019fa <HAL_ADC_PollForConversion+0x1ba>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	e003      	b.n	8001a02 <HAL_ADC_PollForConversion+0x1c2>
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_ADC_PollForConversion+0x208>)
 80019fc:	e001      	b.n	8001a02 <HAL_ADC_PollForConversion+0x1c2>
 80019fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a02:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d104      	bne.n	8001a1a <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2208      	movs	r2, #8
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e008      	b.n	8001a2c <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d103      	bne.n	8001a2c <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	220c      	movs	r2, #12
 8001a2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3720      	adds	r7, #32
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	50000100 	.word	0x50000100
 8001a3c:	50000300 	.word	0x50000300
 8001a40:	50000700 	.word	0x50000700
 8001a44:	50000500 	.word	0x50000500
 8001a48:	50000400 	.word	0x50000400

08001a4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0b6      	sub	sp, #216	; 0xd8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d102      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x24>
 8001a86:	2302      	movs	r3, #2
 8001a88:	f000 bc13 	b.w	80022b2 <HAL_ADC_ConfigChannel+0x84a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fbbd 	bl	8001218 <LL_ADC_REG_IsConversionOngoing>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 83f3 	bne.w	800228c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6859      	ldr	r1, [r3, #4]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f7ff fa51 	bl	8000f5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fbab 	bl	8001218 <LL_ADC_REG_IsConversionOngoing>
 8001ac2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fbcb 	bl	8001266 <LL_ADC_INJ_IsConversionOngoing>
 8001ad0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ad4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f040 81d9 	bne.w	8001e90 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ade:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 81d4 	bne.w	8001e90 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001af0:	d10f      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7ff fa58 	bl	8000fb2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f9ff 	bl	8000f0e <LL_ADC_SetSamplingTimeCommonConfig>
 8001b10:	e00e      	b.n	8001b30 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f7ff fa47 	bl	8000fb2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f9ef 	bl	8000f0e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	08db      	lsrs	r3, r3, #3
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d022      	beq.n	8001b98 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6919      	ldr	r1, [r3, #16]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b62:	f7ff f949 	bl	8000df8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6919      	ldr	r1, [r3, #16]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f7ff f995 	bl	8000ea2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6919      	ldr	r1, [r3, #16]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	7f1b      	ldrb	r3, [r3, #28]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d102      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x126>
 8001b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8c:	e000      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x128>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	461a      	mov	r2, r3
 8001b92:	f7ff f9a1 	bl	8000ed8 <LL_ADC_SetOffsetSaturation>
 8001b96:	e17b      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f94e 	bl	8000e40 <LL_ADC_GetOffsetChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10a      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x15c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff f943 	bl	8000e40 <LL_ADC_GetOffsetChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	0e9b      	lsrs	r3, r3, #26
 8001bbe:	f003 021f 	and.w	r2, r3, #31
 8001bc2:	e01e      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x19a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f938 	bl	8000e40 <LL_ADC_GetOffsetChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001be2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	e004      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001bf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x1b2>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0e9b      	lsrs	r3, r3, #26
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	e018      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x1e4>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e004      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001c42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d106      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f907 	bl	8000e6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2101      	movs	r1, #1
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f8eb 	bl	8000e40 <LL_ADC_GetOffsetChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10a      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x222>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f8e0 	bl	8000e40 <LL_ADC_GetOffsetChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	e01e      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x260>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2101      	movs	r1, #1
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f8d5 	bl	8000e40 <LL_ADC_GetOffsetChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ca8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001cb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e004      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x278>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0e9b      	lsrs	r3, r3, #26
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	e018      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x2aa>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001cf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001d04:	2320      	movs	r3, #32
 8001d06:	e004      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d106      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f8a4 	bl	8000e6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2102      	movs	r1, #2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f888 	bl	8000e40 <LL_ADC_GetOffsetChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10a      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x2e8>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2102      	movs	r1, #2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff f87d 	bl	8000e40 <LL_ADC_GetOffsetChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	0e9b      	lsrs	r3, r3, #26
 8001d4a:	f003 021f 	and.w	r2, r3, #31
 8001d4e:	e01e      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x326>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2102      	movs	r1, #2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f872 	bl	8000e40 <LL_ADC_GetOffsetChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	e004      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d105      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x33e>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	e016      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x36c>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001db8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	e004      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d106      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2102      	movs	r1, #2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff f843 	bl	8000e6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2103      	movs	r1, #3
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff f827 	bl	8000e40 <LL_ADC_GetOffsetChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10a      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x3aa>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2103      	movs	r1, #3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff f81c 	bl	8000e40 <LL_ADC_GetOffsetChannel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	0e9b      	lsrs	r3, r3, #26
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	e017      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x3da>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2103      	movs	r1, #3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff f811 	bl	8000e40 <LL_ADC_GetOffsetChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e2c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001e34:	2320      	movs	r3, #32
 8001e36:	e003      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x3f2>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	e011      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x416>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e003      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d106      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	2103      	movs	r1, #3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe ffee 	bl	8000e6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f971 	bl	800117c <LL_ADC_IsEnabled>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f040 813d 	bne.w	800211c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6819      	ldr	r1, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f7ff f8aa 	bl	8001008 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4aa2      	ldr	r2, [pc, #648]	; (8002144 <HAL_ADC_ConfigChannel+0x6dc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	f040 812e 	bne.w	800211c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10b      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x480>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0e9b      	lsrs	r3, r3, #26
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	2b09      	cmp	r3, #9
 8001ede:	bf94      	ite	ls
 8001ee0:	2301      	movls	r3, #1
 8001ee2:	2300      	movhi	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e019      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x4b4>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ef8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001f00:	2320      	movs	r3, #32
 8001f02:	e003      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	2b09      	cmp	r3, #9
 8001f14:	bf94      	ite	ls
 8001f16:	2301      	movls	r3, #1
 8001f18:	2300      	movhi	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d079      	beq.n	8002014 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d107      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x4d4>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0e9b      	lsrs	r3, r3, #26
 8001f32:	3301      	adds	r3, #1
 8001f34:	069b      	lsls	r3, r3, #26
 8001f36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f3a:	e015      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x500>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001f54:	2320      	movs	r3, #32
 8001f56:	e003      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	069b      	lsls	r3, r3, #26
 8001f64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x520>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0e9b      	lsrs	r3, r3, #26
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	e017      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x550>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e003      	b.n	8001fac <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	ea42 0103 	orr.w	r1, r2, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x576>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0e9b      	lsrs	r3, r3, #26
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	051b      	lsls	r3, r3, #20
 8001fdc:	e018      	b.n	8002010 <HAL_ADC_ConfigChannel+0x5a8>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e003      	b.n	8002002 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	3301      	adds	r3, #1
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002010:	430b      	orrs	r3, r1
 8002012:	e07e      	b.n	8002112 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x5c8>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0e9b      	lsrs	r3, r3, #26
 8002026:	3301      	adds	r3, #1
 8002028:	069b      	lsls	r3, r3, #26
 800202a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800202e:	e015      	b.n	800205c <HAL_ADC_ConfigChannel+0x5f4>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002048:	2320      	movs	r3, #32
 800204a:	e003      	b.n	8002054 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	069b      	lsls	r3, r3, #26
 8002058:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_ADC_ConfigChannel+0x614>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	3301      	adds	r3, #1
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	e017      	b.n	80020ac <HAL_ADC_ConfigChannel+0x644>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	61fb      	str	r3, [r7, #28]
  return result;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002094:	2320      	movs	r3, #32
 8002096:	e003      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	3301      	adds	r3, #1
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	ea42 0103 	orr.w	r1, r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10d      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x670>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0e9b      	lsrs	r3, r3, #26
 80020c2:	3301      	adds	r3, #1
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	3b1e      	subs	r3, #30
 80020d0:	051b      	lsls	r3, r3, #20
 80020d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020d6:	e01b      	b.n	8002110 <HAL_ADC_ConfigChannel+0x6a8>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	613b      	str	r3, [r7, #16]
  return result;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80020f0:	2320      	movs	r3, #32
 80020f2:	e003      	b.n	80020fc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	3301      	adds	r3, #1
 80020fe:	f003 021f 	and.w	r2, r3, #31
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	3b1e      	subs	r3, #30
 800210a:	051b      	lsls	r3, r3, #20
 800210c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002110:	430b      	orrs	r3, r1
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	6892      	ldr	r2, [r2, #8]
 8002116:	4619      	mov	r1, r3
 8002118:	f7fe ff4b 	bl	8000fb2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_ADC_ConfigChannel+0x6e0>)
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80be 	beq.w	80022a6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002132:	d004      	beq.n	800213e <HAL_ADC_ConfigChannel+0x6d6>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <HAL_ADC_ConfigChannel+0x6e4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d10a      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x6ec>
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <HAL_ADC_ConfigChannel+0x6e8>)
 8002140:	e009      	b.n	8002156 <HAL_ADC_ConfigChannel+0x6ee>
 8002142:	bf00      	nop
 8002144:	407f0000 	.word	0x407f0000
 8002148:	80080000 	.word	0x80080000
 800214c:	50000100 	.word	0x50000100
 8002150:	50000300 	.word	0x50000300
 8002154:	4b59      	ldr	r3, [pc, #356]	; (80022bc <HAL_ADC_ConfigChannel+0x854>)
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fe40 	bl	8000ddc <LL_ADC_GetCommonPathInternalCh>
 800215c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a56      	ldr	r2, [pc, #344]	; (80022c0 <HAL_ADC_ConfigChannel+0x858>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d004      	beq.n	8002174 <HAL_ADC_ConfigChannel+0x70c>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a55      	ldr	r2, [pc, #340]	; (80022c4 <HAL_ADC_ConfigChannel+0x85c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d13a      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d134      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002188:	d005      	beq.n	8002196 <HAL_ADC_ConfigChannel+0x72e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a4e      	ldr	r2, [pc, #312]	; (80022c8 <HAL_ADC_ConfigChannel+0x860>)
 8002190:	4293      	cmp	r3, r2
 8002192:	f040 8085 	bne.w	80022a0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800219e:	d004      	beq.n	80021aa <HAL_ADC_ConfigChannel+0x742>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a49      	ldr	r2, [pc, #292]	; (80022cc <HAL_ADC_ConfigChannel+0x864>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x746>
 80021aa:	4a49      	ldr	r2, [pc, #292]	; (80022d0 <HAL_ADC_ConfigChannel+0x868>)
 80021ac:	e000      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x748>
 80021ae:	4a43      	ldr	r2, [pc, #268]	; (80022bc <HAL_ADC_ConfigChannel+0x854>)
 80021b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f7fe fdfb 	bl	8000db6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021c0:	4b44      	ldr	r3, [pc, #272]	; (80022d4 <HAL_ADC_ConfigChannel+0x86c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	4a44      	ldr	r2, [pc, #272]	; (80022d8 <HAL_ADC_ConfigChannel+0x870>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	099b      	lsrs	r3, r3, #6
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021da:	e002      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	3b01      	subs	r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f9      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021e8:	e05a      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a3b      	ldr	r2, [pc, #236]	; (80022dc <HAL_ADC_ConfigChannel+0x874>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d125      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x7d8>
 80021f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d11f      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a31      	ldr	r2, [pc, #196]	; (80022cc <HAL_ADC_ConfigChannel+0x864>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d104      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x7ac>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <HAL_ADC_ConfigChannel+0x878>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d047      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800221c:	d004      	beq.n	8002228 <HAL_ADC_ConfigChannel+0x7c0>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a2a      	ldr	r2, [pc, #168]	; (80022cc <HAL_ADC_ConfigChannel+0x864>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d101      	bne.n	800222c <HAL_ADC_ConfigChannel+0x7c4>
 8002228:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <HAL_ADC_ConfigChannel+0x868>)
 800222a:	e000      	b.n	800222e <HAL_ADC_ConfigChannel+0x7c6>
 800222c:	4a23      	ldr	r2, [pc, #140]	; (80022bc <HAL_ADC_ConfigChannel+0x854>)
 800222e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002236:	4619      	mov	r1, r3
 8002238:	4610      	mov	r0, r2
 800223a:	f7fe fdbc 	bl	8000db6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800223e:	e031      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <HAL_ADC_ConfigChannel+0x87c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d12d      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800224a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800224e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d127      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <HAL_ADC_ConfigChannel+0x864>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d022      	beq.n	80022a6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002268:	d004      	beq.n	8002274 <HAL_ADC_ConfigChannel+0x80c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a17      	ldr	r2, [pc, #92]	; (80022cc <HAL_ADC_ConfigChannel+0x864>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x810>
 8002274:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <HAL_ADC_ConfigChannel+0x868>)
 8002276:	e000      	b.n	800227a <HAL_ADC_ConfigChannel+0x812>
 8002278:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_ADC_ConfigChannel+0x854>)
 800227a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800227e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002282:	4619      	mov	r1, r3
 8002284:	4610      	mov	r0, r2
 8002286:	f7fe fd96 	bl	8000db6 <LL_ADC_SetCommonPathInternalCh>
 800228a:	e00c      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	f043 0220 	orr.w	r2, r3, #32
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800229e:	e002      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022a0:	bf00      	nop
 80022a2:	e000      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80022ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	37d8      	adds	r7, #216	; 0xd8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	50000700 	.word	0x50000700
 80022c0:	c3210000 	.word	0xc3210000
 80022c4:	90c00010 	.word	0x90c00010
 80022c8:	50000600 	.word	0x50000600
 80022cc:	50000100 	.word	0x50000100
 80022d0:	50000300 	.word	0x50000300
 80022d4:	20000024 	.word	0x20000024
 80022d8:	053e2d63 	.word	0x053e2d63
 80022dc:	c7520000 	.word	0xc7520000
 80022e0:	50000500 	.word	0x50000500
 80022e4:	cb840000 	.word	0xcb840000

080022e8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe ff8a 	bl	8001218 <LL_ADC_REG_IsConversionOngoing>
 8002304:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe ffab 	bl	8001266 <LL_ADC_INJ_IsConversionOngoing>
 8002310:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d103      	bne.n	8002320 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8098 	beq.w	8002450 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d02a      	beq.n	8002384 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7f5b      	ldrb	r3, [r3, #29]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d126      	bne.n	8002384 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7f1b      	ldrb	r3, [r3, #28]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d122      	bne.n	8002384 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800233e:	2301      	movs	r3, #1
 8002340:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002342:	e014      	b.n	800236e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4a45      	ldr	r2, [pc, #276]	; (800245c <ADC_ConversionStop+0x174>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d90d      	bls.n	8002368 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002350:	f043 0210 	orr.w	r2, r3, #16
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e074      	b.n	8002452 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	3301      	adds	r3, #1
 800236c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	d1e3      	bne.n	8002344 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2240      	movs	r2, #64	; 0x40
 8002382:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d014      	beq.n	80023b4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe ff42 	bl	8001218 <LL_ADC_REG_IsConversionOngoing>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00c      	beq.n	80023b4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe feff 	bl	80011a2 <LL_ADC_IsDisableOngoing>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d104      	bne.n	80023b4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe ff1e 	bl	80011f0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d014      	beq.n	80023e4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe ff51 	bl	8001266 <LL_ADC_INJ_IsConversionOngoing>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00c      	beq.n	80023e4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fee7 	bl	80011a2 <LL_ADC_IsDisableOngoing>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d104      	bne.n	80023e4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe ff2d 	bl	800123e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d005      	beq.n	80023f6 <ADC_ConversionStop+0x10e>
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d105      	bne.n	80023fc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80023f0:	230c      	movs	r3, #12
 80023f2:	617b      	str	r3, [r7, #20]
        break;
 80023f4:	e005      	b.n	8002402 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80023f6:	2308      	movs	r3, #8
 80023f8:	617b      	str	r3, [r7, #20]
        break;
 80023fa:	e002      	b.n	8002402 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80023fc:	2304      	movs	r3, #4
 80023fe:	617b      	str	r3, [r7, #20]
        break;
 8002400:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002402:	f7fe fc97 	bl	8000d34 <HAL_GetTick>
 8002406:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002408:	e01b      	b.n	8002442 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800240a:	f7fe fc93 	bl	8000d34 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b05      	cmp	r3, #5
 8002416:	d914      	bls.n	8002442 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	f043 0210 	orr.w	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e007      	b.n	8002452 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1dc      	bne.n	800240a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	a33fffff 	.word	0xa33fffff

08002460 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fe85 	bl	800117c <LL_ADC_IsEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d14d      	bne.n	8002514 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <ADC_Enable+0xc0>)
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	f043 0210 	orr.w	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e039      	b.n	8002516 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fe40 	bl	800112c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024ac:	f7fe fc42 	bl	8000d34 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024b2:	e028      	b.n	8002506 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fe5f 	bl	800117c <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d104      	bne.n	80024ce <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fe2f 	bl	800112c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ce:	f7fe fc31 	bl	8000d34 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d914      	bls.n	8002506 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d00d      	beq.n	8002506 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ee:	f043 0210 	orr.w	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e007      	b.n	8002516 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d1cf      	bne.n	80024b4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	8000003f 	.word	0x8000003f

08002524 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fe36 	bl	80011a2 <LL_ADC_IsDisableOngoing>
 8002536:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fe1d 	bl	800117c <LL_ADC_IsEnabled>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d047      	beq.n	80025d8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d144      	bne.n	80025d8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030d 	and.w	r3, r3, #13
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10c      	bne.n	8002576 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe fdf7 	bl	8001154 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2203      	movs	r2, #3
 800256c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800256e:	f7fe fbe1 	bl	8000d34 <HAL_GetTick>
 8002572:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002574:	e029      	b.n	80025ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	f043 0210 	orr.w	r2, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002586:	f043 0201 	orr.w	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e023      	b.n	80025da <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002592:	f7fe fbcf 	bl	8000d34 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d914      	bls.n	80025ca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	f043 0210 	orr.w	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e007      	b.n	80025da <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1dc      	bne.n	8002592 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <LL_ADC_IsEnabled>:
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <LL_ADC_IsEnabled+0x18>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <LL_ADC_IsEnabled+0x1a>
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_StartCalibration>:
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800261a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002624:	4313      	orrs	r3, r2
 8002626:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	609a      	str	r2, [r3, #8]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LL_ADC_IsCalibrationOnGoing>:
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800264a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800264e:	d101      	bne.n	8002654 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_ADC_REG_IsConversionOngoing>:
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b04      	cmp	r3, #4
 8002674:	d101      	bne.n	800267a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_ADCEx_Calibration_Start+0x1c>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e04d      	b.n	8002740 <HAL_ADCEx_Calibration_Start+0xb8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff39 	bl	8002524 <ADC_Disable>
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d136      	bne.n	800272a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026c4:	f023 0302 	bic.w	r3, r3, #2
 80026c8:	f043 0202 	orr.w	r2, r3, #2
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6839      	ldr	r1, [r7, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff96 	bl	8002608 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026dc:	e014      	b.n	8002708 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3301      	adds	r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4a18      	ldr	r2, [pc, #96]	; (8002748 <HAL_ADCEx_Calibration_Start+0xc0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d90d      	bls.n	8002708 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	f023 0312 	bic.w	r3, r3, #18
 80026f4:	f043 0210 	orr.w	r2, r3, #16
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e01b      	b.n	8002740 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff94 	bl	800263a <LL_ADC_IsCalibrationOnGoing>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e2      	bne.n	80026de <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	f023 0303 	bic.w	r3, r3, #3
 8002720:	f043 0201 	orr.w	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	65da      	str	r2, [r3, #92]	; 0x5c
 8002728:	e005      	b.n	8002736 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	f043 0210 	orr.w	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	0004de01 	.word	0x0004de01

0800274c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b0a1      	sub	sp, #132	; 0x84
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002766:	2302      	movs	r3, #2
 8002768:	e0e7      	b.n	800293a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002772:	2300      	movs	r3, #0
 8002774:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002776:	2300      	movs	r3, #0
 8002778:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002782:	d102      	bne.n	800278a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002784:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	e009      	b.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6e      	ldr	r2, [pc, #440]	; (8002948 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d102      	bne.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002794:	4b6d      	ldr	r3, [pc, #436]	; (800294c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	e001      	b.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0be      	b.n	800293a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff4f 	bl	8002662 <LL_ADC_REG_IsConversionOngoing>
 80027c4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff49 	bl	8002662 <LL_ADC_REG_IsConversionOngoing>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 80a0 	bne.w	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80027d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 809c 	bne.w	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027e8:	d004      	beq.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a55      	ldr	r2, [pc, #340]	; (8002944 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d101      	bne.n	80027f8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80027f4:	4b56      	ldr	r3, [pc, #344]	; (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80027f6:	e000      	b.n	80027fa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80027f8:	4b56      	ldr	r3, [pc, #344]	; (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80027fa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d04b      	beq.n	800289c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002816:	035b      	lsls	r3, r3, #13
 8002818:	430b      	orrs	r3, r1
 800281a:	431a      	orrs	r2, r3
 800281c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800281e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002828:	d004      	beq.n	8002834 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a45      	ldr	r2, [pc, #276]	; (8002944 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d10f      	bne.n	8002854 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002834:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002838:	f7ff fed3 	bl	80025e2 <LL_ADC_IsEnabled>
 800283c:	4604      	mov	r4, r0
 800283e:	4841      	ldr	r0, [pc, #260]	; (8002944 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002840:	f7ff fecf 	bl	80025e2 <LL_ADC_IsEnabled>
 8002844:	4603      	mov	r3, r0
 8002846:	4323      	orrs	r3, r4
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e012      	b.n	800287a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002854:	483c      	ldr	r0, [pc, #240]	; (8002948 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002856:	f7ff fec4 	bl	80025e2 <LL_ADC_IsEnabled>
 800285a:	4604      	mov	r4, r0
 800285c:	483b      	ldr	r0, [pc, #236]	; (800294c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800285e:	f7ff fec0 	bl	80025e2 <LL_ADC_IsEnabled>
 8002862:	4603      	mov	r3, r0
 8002864:	431c      	orrs	r4, r3
 8002866:	483c      	ldr	r0, [pc, #240]	; (8002958 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002868:	f7ff febb 	bl	80025e2 <LL_ADC_IsEnabled>
 800286c:	4603      	mov	r3, r0
 800286e:	4323      	orrs	r3, r4
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d056      	beq.n	800292c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800287e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002886:	f023 030f 	bic.w	r3, r3, #15
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	6811      	ldr	r1, [r2, #0]
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	6892      	ldr	r2, [r2, #8]
 8002892:	430a      	orrs	r2, r1
 8002894:	431a      	orrs	r2, r3
 8002896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002898:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800289a:	e047      	b.n	800292c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800289c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b0:	d004      	beq.n	80028bc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a23      	ldr	r2, [pc, #140]	; (8002944 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d10f      	bne.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80028bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028c0:	f7ff fe8f 	bl	80025e2 <LL_ADC_IsEnabled>
 80028c4:	4604      	mov	r4, r0
 80028c6:	481f      	ldr	r0, [pc, #124]	; (8002944 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028c8:	f7ff fe8b 	bl	80025e2 <LL_ADC_IsEnabled>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4323      	orrs	r3, r4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e012      	b.n	8002902 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80028dc:	481a      	ldr	r0, [pc, #104]	; (8002948 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028de:	f7ff fe80 	bl	80025e2 <LL_ADC_IsEnabled>
 80028e2:	4604      	mov	r4, r0
 80028e4:	4819      	ldr	r0, [pc, #100]	; (800294c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028e6:	f7ff fe7c 	bl	80025e2 <LL_ADC_IsEnabled>
 80028ea:	4603      	mov	r3, r0
 80028ec:	431c      	orrs	r4, r3
 80028ee:	481a      	ldr	r0, [pc, #104]	; (8002958 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80028f0:	f7ff fe77 	bl	80025e2 <LL_ADC_IsEnabled>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4323      	orrs	r3, r4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800290e:	f023 030f 	bic.w	r3, r3, #15
 8002912:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002914:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002916:	e009      	b.n	800292c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	f043 0220 	orr.w	r2, r3, #32
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800292a:	e000      	b.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800292c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002936:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800293a:	4618      	mov	r0, r3
 800293c:	3784      	adds	r7, #132	; 0x84
 800293e:	46bd      	mov	sp, r7
 8002940:	bd90      	pop	{r4, r7, pc}
 8002942:	bf00      	nop
 8002944:	50000100 	.word	0x50000100
 8002948:	50000400 	.word	0x50000400
 800294c:	50000500 	.word	0x50000500
 8002950:	50000300 	.word	0x50000300
 8002954:	50000700 	.word	0x50000700
 8002958:	50000600 	.word	0x50000600

0800295c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298e:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	60d3      	str	r3, [r2, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <__NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db0b      	blt.n	80029ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	4907      	ldr	r1, [pc, #28]	; (80029f8 <__NVIC_EnableIRQ+0x38>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2001      	movs	r0, #1
 80029e2:	fa00 f202 	lsl.w	r2, r0, r2
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e100 	.word	0xe000e100

080029fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	db0a      	blt.n	8002a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	490c      	ldr	r1, [pc, #48]	; (8002a48 <__NVIC_SetPriority+0x4c>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a24:	e00a      	b.n	8002a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4908      	ldr	r1, [pc, #32]	; (8002a4c <__NVIC_SetPriority+0x50>)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	3b04      	subs	r3, #4
 8002a34:	0112      	lsls	r2, r2, #4
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	440b      	add	r3, r1
 8002a3a:	761a      	strb	r2, [r3, #24]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f1c3 0307 	rsb	r3, r3, #7
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	bf28      	it	cs
 8002a6e:	2304      	movcs	r3, #4
 8002a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d902      	bls.n	8002a80 <NVIC_EncodePriority+0x30>
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3b03      	subs	r3, #3
 8002a7e:	e000      	b.n	8002a82 <NVIC_EncodePriority+0x32>
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	401a      	ands	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	43d9      	mvns	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	4313      	orrs	r3, r2
         );
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	; 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac8:	d301      	bcc.n	8002ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00f      	b.n	8002aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <SysTick_Config+0x40>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	f7ff ff8e 	bl	80029fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <SysTick_Config+0x40>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ae6:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <SysTick_Config+0x40>)
 8002ae8:	2207      	movs	r2, #7
 8002aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	e000e010 	.word	0xe000e010

08002afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff29 	bl	800295c <__NVIC_SetPriorityGrouping>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b20:	f7ff ff40 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	6978      	ldr	r0, [r7, #20]
 8002b2c:	f7ff ff90 	bl	8002a50 <NVIC_EncodePriority>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff5f 	bl	80029fc <__NVIC_SetPriority>
}
 8002b3e:	bf00      	nop
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff33 	bl	80029c0 <__NVIC_EnableIRQ>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ffa4 	bl	8002ab8 <SysTick_Config>
 8002b70:	4603      	mov	r3, r0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e014      	b.n	8002bb6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	791b      	ldrb	r3, [r3, #4]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7fd ff61 	bl	8000a64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	795b      	ldrb	r3, [r3, #5]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_DAC_Start+0x16>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e043      	b.n	8002c5c <HAL_DAC_Start+0x9e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6819      	ldr	r1, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2201      	movs	r2, #1
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7fe f8a7 	bl	8000d4c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10f      	bne.n	8002c24 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d11d      	bne.n	8002c4e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	e014      	b.n	8002c4e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2102      	movs	r1, #2
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d107      	bne.n	8002c4e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0202 	orr.w	r2, r2, #2
 8002c4c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3308      	adds	r3, #8
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e004      	b.n	8002c9e <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3314      	adds	r3, #20
 8002c9c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	; 0x28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	795b      	ldrb	r3, [r3, #5]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_DAC_ConfigChannel+0x18>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e192      	b.n	8002ff2 <HAL_DAC_ConfigChannel+0x33e>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d174      	bne.n	8002dca <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ce0:	f7fe f828 	bl	8000d34 <HAL_GetTick>
 8002ce4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d134      	bne.n	8002d56 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cec:	e011      	b.n	8002d12 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cee:	f7fe f821 	bl	8000d34 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d90a      	bls.n	8002d12 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f043 0208 	orr.w	r2, r3, #8
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e16f      	b.n	8002ff2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e6      	bne.n	8002cee <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002d20:	2001      	movs	r0, #1
 8002d22:	f7fe f813 	bl	8000d4c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d30:	e01e      	b.n	8002d70 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d32:	f7fd ffff 	bl	8000d34 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d90a      	bls.n	8002d56 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f043 0208 	orr.w	r2, r3, #8
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2203      	movs	r2, #3
 8002d50:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e14d      	b.n	8002ff2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	dbe8      	blt.n	8002d32 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002d60:	2001      	movs	r0, #1
 8002d62:	f7fd fff3 	bl	8000d4c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	ea02 0103 	and.w	r1, r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	21ff      	movs	r1, #255	; 0xff
 8002dac:	fa01 f303 	lsl.w	r3, r1, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	ea02 0103 	and.w	r1, r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d11d      	bne.n	8002e0e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	221f      	movs	r2, #31
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dea:	4013      	ands	r3, r2
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e02:	4313      	orrs	r3, r2
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e26:	4013      	ands	r3, r2
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d102      	bne.n	8002e38 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
 8002e36:	e00f      	b.n	8002e58 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d102      	bne.n	8002e46 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002e40:	2301      	movs	r3, #1
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	e008      	b.n	8002e58 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	623b      	str	r3, [r7, #32]
 8002e52:	e001      	b.n	8002e58 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	6a3a      	ldr	r2, [r7, #32]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	791b      	ldrb	r3, [r3, #4]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d102      	bne.n	8002e8c <HAL_DAC_ConfigChannel+0x1d8>
 8002e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e8a:	e000      	b.n	8002e8e <HAL_DAC_ConfigChannel+0x1da>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	795b      	ldrb	r3, [r3, #5]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d102      	bne.n	8002eb8 <HAL_DAC_ConfigChannel+0x204>
 8002eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb6:	e000      	b.n	8002eba <HAL_DAC_ConfigChannel+0x206>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d114      	bne.n	8002efa <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002ed0:	f000 ffc0 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8002ed4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	4a48      	ldr	r2, [pc, #288]	; (8002ffc <HAL_DAC_ConfigChannel+0x348>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d904      	bls.n	8002ee8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee6:	e00f      	b.n	8002f08 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	4a45      	ldr	r2, [pc, #276]	; (8003000 <HAL_DAC_ConfigChannel+0x34c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d90a      	bls.n	8002f06 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef8:	e006      	b.n	8002f08 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f00:	4313      	orrs	r3, r2
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
 8002f04:	e000      	b.n	8002f08 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002f06:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f16:	4313      	orrs	r3, r2
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6819      	ldr	r1, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f72:	4313      	orrs	r3, r2
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	22c0      	movs	r2, #192	; 0xc0
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43da      	mvns	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	400a      	ands	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	089b      	lsrs	r3, r3, #2
 8002fac:	021b      	lsls	r3, r3, #8
 8002fae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	ea02 0103 	and.w	r1, r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3728      	adds	r7, #40	; 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	09896800 	.word	0x09896800
 8003000:	04c4b400 	.word	0x04c4b400

08003004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003012:	e15a      	b.n	80032ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	4013      	ands	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 814c 	beq.w	80032c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d005      	beq.n	8003044 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003040:	2b02      	cmp	r3, #2
 8003042:	d130      	bne.n	80030a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800307a:	2201      	movs	r2, #1
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4013      	ands	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	f003 0201 	and.w	r2, r3, #1
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d017      	beq.n	80030e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	2203      	movs	r2, #3
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d123      	bne.n	8003136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	220f      	movs	r2, #15
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	08da      	lsrs	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3208      	adds	r2, #8
 8003130:	6939      	ldr	r1, [r7, #16]
 8003132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0203 	and.w	r2, r3, #3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80a6 	beq.w	80032c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003178:	4b5b      	ldr	r3, [pc, #364]	; (80032e8 <HAL_GPIO_Init+0x2e4>)
 800317a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317c:	4a5a      	ldr	r2, [pc, #360]	; (80032e8 <HAL_GPIO_Init+0x2e4>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6613      	str	r3, [r2, #96]	; 0x60
 8003184:	4b58      	ldr	r3, [pc, #352]	; (80032e8 <HAL_GPIO_Init+0x2e4>)
 8003186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003190:	4a56      	ldr	r2, [pc, #344]	; (80032ec <HAL_GPIO_Init+0x2e8>)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	3302      	adds	r3, #2
 8003198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	220f      	movs	r2, #15
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031ba:	d01f      	beq.n	80031fc <HAL_GPIO_Init+0x1f8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a4c      	ldr	r2, [pc, #304]	; (80032f0 <HAL_GPIO_Init+0x2ec>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d019      	beq.n	80031f8 <HAL_GPIO_Init+0x1f4>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a4b      	ldr	r2, [pc, #300]	; (80032f4 <HAL_GPIO_Init+0x2f0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d013      	beq.n	80031f4 <HAL_GPIO_Init+0x1f0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a4a      	ldr	r2, [pc, #296]	; (80032f8 <HAL_GPIO_Init+0x2f4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00d      	beq.n	80031f0 <HAL_GPIO_Init+0x1ec>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a49      	ldr	r2, [pc, #292]	; (80032fc <HAL_GPIO_Init+0x2f8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d007      	beq.n	80031ec <HAL_GPIO_Init+0x1e8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a48      	ldr	r2, [pc, #288]	; (8003300 <HAL_GPIO_Init+0x2fc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_GPIO_Init+0x1e4>
 80031e4:	2305      	movs	r3, #5
 80031e6:	e00a      	b.n	80031fe <HAL_GPIO_Init+0x1fa>
 80031e8:	2306      	movs	r3, #6
 80031ea:	e008      	b.n	80031fe <HAL_GPIO_Init+0x1fa>
 80031ec:	2304      	movs	r3, #4
 80031ee:	e006      	b.n	80031fe <HAL_GPIO_Init+0x1fa>
 80031f0:	2303      	movs	r3, #3
 80031f2:	e004      	b.n	80031fe <HAL_GPIO_Init+0x1fa>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e002      	b.n	80031fe <HAL_GPIO_Init+0x1fa>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_GPIO_Init+0x1fa>
 80031fc:	2300      	movs	r3, #0
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	f002 0203 	and.w	r2, r2, #3
 8003204:	0092      	lsls	r2, r2, #2
 8003206:	4093      	lsls	r3, r2
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800320e:	4937      	ldr	r1, [pc, #220]	; (80032ec <HAL_GPIO_Init+0x2e8>)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	089b      	lsrs	r3, r3, #2
 8003214:	3302      	adds	r3, #2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800321c:	4b39      	ldr	r3, [pc, #228]	; (8003304 <HAL_GPIO_Init+0x300>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	43db      	mvns	r3, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003240:	4a30      	ldr	r2, [pc, #192]	; (8003304 <HAL_GPIO_Init+0x300>)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003246:	4b2f      	ldr	r3, [pc, #188]	; (8003304 <HAL_GPIO_Init+0x300>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800326a:	4a26      	ldr	r2, [pc, #152]	; (8003304 <HAL_GPIO_Init+0x300>)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_GPIO_Init+0x300>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	43db      	mvns	r3, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003294:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <HAL_GPIO_Init+0x300>)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800329a:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <HAL_GPIO_Init+0x300>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032be:	4a11      	ldr	r2, [pc, #68]	; (8003304 <HAL_GPIO_Init+0x300>)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3301      	adds	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f47f ae9d 	bne.w	8003014 <HAL_GPIO_Init+0x10>
  }
}
 80032da:	bf00      	nop
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40010000 	.word	0x40010000
 80032f0:	48000400 	.word	0x48000400
 80032f4:	48000800 	.word	0x48000800
 80032f8:	48000c00 	.word	0x48000c00
 80032fc:	48001000 	.word	0x48001000
 8003300:	48001400 	.word	0x48001400
 8003304:	40010400 	.word	0x40010400

08003308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	807b      	strh	r3, [r7, #2]
 8003314:	4613      	mov	r3, r2
 8003316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003318:	787b      	ldrb	r3, [r7, #1]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003324:	e002      	b.n	800332c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800334e:	4a05      	ldr	r2, [pc, #20]	; (8003364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f806 	bl	8003368 <HAL_GPIO_EXTI_Callback>
  }
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40010400 	.word	0x40010400

08003368 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d141      	bne.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800338e:	4b4b      	ldr	r3, [pc, #300]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339a:	d131      	bne.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800339c:	4b47      	ldr	r3, [pc, #284]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a2:	4a46      	ldr	r2, [pc, #280]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033ac:	4b43      	ldr	r3, [pc, #268]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033b4:	4a41      	ldr	r2, [pc, #260]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033bc:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2232      	movs	r2, #50	; 0x32
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	4a3f      	ldr	r2, [pc, #252]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	0c9b      	lsrs	r3, r3, #18
 80033ce:	3301      	adds	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033d2:	e002      	b.n	80033da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033da:	4b38      	ldr	r3, [pc, #224]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e6:	d102      	bne.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f2      	bne.n	80033d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ee:	4b33      	ldr	r3, [pc, #204]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fa:	d158      	bne.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e057      	b.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003400:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003406:	4a2d      	ldr	r2, [pc, #180]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800340c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003410:	e04d      	b.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003418:	d141      	bne.n	800349e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800341a:	4b28      	ldr	r3, [pc, #160]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003426:	d131      	bne.n	800348c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342e:	4a23      	ldr	r2, [pc, #140]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003440:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003446:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2232      	movs	r2, #50	; 0x32
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	4a1c      	ldr	r2, [pc, #112]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	0c9b      	lsrs	r3, r3, #18
 800345a:	3301      	adds	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800345e:	e002      	b.n	8003466 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3b01      	subs	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003472:	d102      	bne.n	800347a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f2      	bne.n	8003460 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003486:	d112      	bne.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e011      	b.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003498:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800349c:	e007      	b.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034a6:	4a05      	ldr	r2, [pc, #20]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	40007000 	.word	0x40007000
 80034c0:	20000024 	.word	0x20000024
 80034c4:	431bde83 	.word	0x431bde83

080034c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d6:	6093      	str	r3, [r2, #8]
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40007000 	.word	0x40007000

080034e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e306      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d075      	beq.n	80035f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003506:	4b97      	ldr	r3, [pc, #604]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003510:	4b94      	ldr	r3, [pc, #592]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d102      	bne.n	8003526 <HAL_RCC_OscConfig+0x3e>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d002      	beq.n	800352c <HAL_RCC_OscConfig+0x44>
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d10b      	bne.n	8003544 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	4b8d      	ldr	r3, [pc, #564]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d05b      	beq.n	80035f0 <HAL_RCC_OscConfig+0x108>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d157      	bne.n	80035f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e2e1      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d106      	bne.n	800355c <HAL_RCC_OscConfig+0x74>
 800354e:	4b85      	ldr	r3, [pc, #532]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a84      	ldr	r2, [pc, #528]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e01d      	b.n	8003598 <HAL_RCC_OscConfig+0xb0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x98>
 8003566:	4b7f      	ldr	r3, [pc, #508]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7e      	ldr	r2, [pc, #504]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b7c      	ldr	r3, [pc, #496]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7b      	ldr	r2, [pc, #492]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0xb0>
 8003580:	4b78      	ldr	r3, [pc, #480]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a77      	ldr	r2, [pc, #476]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b75      	ldr	r3, [pc, #468]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a74      	ldr	r2, [pc, #464]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fd fbc8 	bl	8000d34 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fd fbc4 	bl	8000d34 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e2a6      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ba:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0xc0>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fd fbb4 	bl	8000d34 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fd fbb0 	bl	8000d34 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e292      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035e2:	4b60      	ldr	r3, [pc, #384]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0xe8>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d075      	beq.n	80036ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fe:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003608:	4b56      	ldr	r3, [pc, #344]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d102      	bne.n	800361e <HAL_RCC_OscConfig+0x136>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d002      	beq.n	8003624 <HAL_RCC_OscConfig+0x13c>
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d11f      	bne.n	8003664 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003624:	4b4f      	ldr	r3, [pc, #316]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_OscConfig+0x154>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e265      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363c:	4b49      	ldr	r3, [pc, #292]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	4946      	ldr	r1, [pc, #280]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003650:	4b45      	ldr	r3, [pc, #276]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd fb21 	bl	8000c9c <HAL_InitTick>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d043      	beq.n	80036e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e251      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d023      	beq.n	80036b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800366c:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3c      	ldr	r2, [pc, #240]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fd fb5c 	bl	8000d34 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003680:	f7fd fb58 	bl	8000d34 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e23a      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003692:	4b34      	ldr	r3, [pc, #208]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	4b31      	ldr	r3, [pc, #196]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	061b      	lsls	r3, r3, #24
 80036ac:	492d      	ldr	r1, [pc, #180]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
 80036b2:	e01a      	b.n	80036ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b4:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2a      	ldr	r2, [pc, #168]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fd fb38 	bl	8000d34 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c8:	f7fd fb34 	bl	8000d34 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e216      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x1e0>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d041      	beq.n	800377a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01c      	beq.n	8003738 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003704:	4a17      	ldr	r2, [pc, #92]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370e:	f7fd fb11 	bl	8000d34 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003716:	f7fd fb0d 	bl	8000d34 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e1ef      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800372a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0ef      	beq.n	8003716 <HAL_RCC_OscConfig+0x22e>
 8003736:	e020      	b.n	800377a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800373a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fd faf4 	bl	8000d34 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800374e:	e00d      	b.n	800376c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003750:	f7fd faf0 	bl	8000d34 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d906      	bls.n	800376c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e1d2      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800376c:	4b8c      	ldr	r3, [pc, #560]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800376e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1ea      	bne.n	8003750 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80a6 	beq.w	80038d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003788:	2300      	movs	r3, #0
 800378a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800378c:	4b84      	ldr	r3, [pc, #528]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_OscConfig+0x2b4>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x2b6>
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	4b7f      	ldr	r3, [pc, #508]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	4a7e      	ldr	r2, [pc, #504]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6593      	str	r3, [r2, #88]	; 0x58
 80037ae:	4b7c      	ldr	r3, [pc, #496]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037ba:	2301      	movs	r3, #1
 80037bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037be:	4b79      	ldr	r3, [pc, #484]	; (80039a4 <HAL_RCC_OscConfig+0x4bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d118      	bne.n	80037fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ca:	4b76      	ldr	r3, [pc, #472]	; (80039a4 <HAL_RCC_OscConfig+0x4bc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a75      	ldr	r2, [pc, #468]	; (80039a4 <HAL_RCC_OscConfig+0x4bc>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d6:	f7fd faad 	bl	8000d34 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037de:	f7fd faa9 	bl	8000d34 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e18b      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f0:	4b6c      	ldr	r3, [pc, #432]	; (80039a4 <HAL_RCC_OscConfig+0x4bc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d108      	bne.n	8003816 <HAL_RCC_OscConfig+0x32e>
 8003804:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003814:	e024      	b.n	8003860 <HAL_RCC_OscConfig+0x378>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b05      	cmp	r3, #5
 800381c:	d110      	bne.n	8003840 <HAL_RCC_OscConfig+0x358>
 800381e:	4b60      	ldr	r3, [pc, #384]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	4a5e      	ldr	r2, [pc, #376]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800382e:	4b5c      	ldr	r3, [pc, #368]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	4a5a      	ldr	r2, [pc, #360]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800383e:	e00f      	b.n	8003860 <HAL_RCC_OscConfig+0x378>
 8003840:	4b57      	ldr	r3, [pc, #348]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	4a56      	ldr	r2, [pc, #344]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003850:	4b53      	ldr	r3, [pc, #332]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	4a52      	ldr	r2, [pc, #328]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d016      	beq.n	8003896 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003868:	f7fd fa64 	bl	8000d34 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800386e:	e00a      	b.n	8003886 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003870:	f7fd fa60 	bl	8000d34 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e140      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003886:	4b46      	ldr	r3, [pc, #280]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ed      	beq.n	8003870 <HAL_RCC_OscConfig+0x388>
 8003894:	e015      	b.n	80038c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7fd fa4d 	bl	8000d34 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fd fa49 	bl	8000d34 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e129      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b4:	4b3a      	ldr	r3, [pc, #232]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ed      	bne.n	800389e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038c2:	7ffb      	ldrb	r3, [r7, #31]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d105      	bne.n	80038d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c8:	4b35      	ldr	r3, [pc, #212]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d03c      	beq.n	800395a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01c      	beq.n	8003922 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038e8:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ee:	4a2c      	ldr	r2, [pc, #176]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fd fa1c 	bl	8000d34 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003900:	f7fd fa18 	bl	8000d34 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e0fa      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ef      	beq.n	8003900 <HAL_RCC_OscConfig+0x418>
 8003920:	e01b      	b.n	800395a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003922:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fd f9ff 	bl	8000d34 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800393a:	f7fd f9fb 	bl	8000d34 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e0dd      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800394e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1ef      	bne.n	800393a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80d1 	beq.w	8003b06 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b0c      	cmp	r3, #12
 800396e:	f000 808b 	beq.w	8003a88 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d15e      	bne.n	8003a38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397a:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fd f9d5 	bl	8000d34 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398c:	e00c      	b.n	80039a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398e:	f7fd f9d1 	bl	8000d34 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d905      	bls.n	80039a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e0b3      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a8:	4b59      	ldr	r3, [pc, #356]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ec      	bne.n	800398e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b4:	4b56      	ldr	r3, [pc, #344]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <HAL_RCC_OscConfig+0x62c>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6a11      	ldr	r1, [r2, #32]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c4:	3a01      	subs	r2, #1
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	4311      	orrs	r1, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80039ce:	0212      	lsls	r2, r2, #8
 80039d0:	4311      	orrs	r1, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039d6:	0852      	lsrs	r2, r2, #1
 80039d8:	3a01      	subs	r2, #1
 80039da:	0552      	lsls	r2, r2, #21
 80039dc:	4311      	orrs	r1, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039e2:	0852      	lsrs	r2, r2, #1
 80039e4:	3a01      	subs	r2, #1
 80039e6:	0652      	lsls	r2, r2, #25
 80039e8:	4311      	orrs	r1, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039ee:	06d2      	lsls	r2, r2, #27
 80039f0:	430a      	orrs	r2, r1
 80039f2:	4947      	ldr	r1, [pc, #284]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f8:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a44      	ldr	r2, [pc, #272]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a04:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a41      	ldr	r2, [pc, #260]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fd f990 	bl	8000d34 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fd f98c 	bl	8000d34 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e06e      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2a:	4b39      	ldr	r3, [pc, #228]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x530>
 8003a36:	e066      	b.n	8003b06 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a34      	ldr	r2, [pc, #208]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a42:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a44:	4b32      	ldr	r3, [pc, #200]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4a31      	ldr	r2, [pc, #196]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a50:	4b2f      	ldr	r3, [pc, #188]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a2e      	ldr	r2, [pc, #184]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a56:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fd f968 	bl	8000d34 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fd f964 	bl	8000d34 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e046      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a7a:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x580>
 8003a86:	e03e      	b.n	8003b06 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e039      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a94:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0203 	and.w	r2, r3, #3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d12c      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d123      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d11b      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d113      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d109      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	3b01      	subs	r3, #1
 8003afc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000
 8003b14:	019f800c 	.word	0x019f800c

08003b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e11e      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b30:	4b91      	ldr	r3, [pc, #580]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d910      	bls.n	8003b60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b8e      	ldr	r3, [pc, #568]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 020f 	bic.w	r2, r3, #15
 8003b46:	498c      	ldr	r1, [pc, #560]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b8a      	ldr	r3, [pc, #552]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e106      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d073      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d129      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b74:	4b81      	ldr	r3, [pc, #516]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0f4      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b84:	f000 f99e 	bl	8003ec4 <RCC_GetSysClockFreqFromPLLSource>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4a7c      	ldr	r2, [pc, #496]	; (8003d80 <HAL_RCC_ClockConfig+0x268>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d93f      	bls.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b92:	4b7a      	ldr	r3, [pc, #488]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d033      	beq.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d12f      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bb2:	4b72      	ldr	r3, [pc, #456]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bba:	4a70      	ldr	r2, [pc, #448]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e024      	b.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d109      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0c6      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be0:	4b66      	ldr	r3, [pc, #408]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0be      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bf0:	f000 f8ce 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4a61      	ldr	r2, [pc, #388]	; (8003d80 <HAL_RCC_ClockConfig+0x268>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d909      	bls.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bfe:	4b5f      	ldr	r3, [pc, #380]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c06:	4a5d      	ldr	r2, [pc, #372]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c12:	4b5a      	ldr	r3, [pc, #360]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4957      	ldr	r1, [pc, #348]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c24:	f7fd f886 	bl	8000d34 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2c:	f7fd f882 	bl	8000d34 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e095      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	4b4e      	ldr	r3, [pc, #312]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 020c 	and.w	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1eb      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d023      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c6c:	4b43      	ldr	r3, [pc, #268]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4a42      	ldr	r2, [pc, #264]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c84:	4b3d      	ldr	r3, [pc, #244]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c8c:	4a3b      	ldr	r2, [pc, #236]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4936      	ldr	r1, [pc, #216]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d105      	bne.n	8003cba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cae:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4a32      	ldr	r2, [pc, #200]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003cb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cba:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d21d      	bcs.n	8003d04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 020f 	bic.w	r2, r3, #15
 8003cd0:	4929      	ldr	r1, [pc, #164]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cd8:	f7fd f82c 	bl	8000d34 <HAL_GetTick>
 8003cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce0:	f7fd f828 	bl	8000d34 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e03b      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d1ed      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d10:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4917      	ldr	r1, [pc, #92]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2e:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	490f      	ldr	r1, [pc, #60]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d42:	f000 f825 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d46:	4602      	mov	r2, r0
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	490c      	ldr	r1, [pc, #48]	; (8003d84 <HAL_RCC_ClockConfig+0x26c>)
 8003d54:	5ccb      	ldrb	r3, [r1, r3]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <HAL_RCC_ClockConfig+0x270>)
 8003d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_RCC_ClockConfig+0x274>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc ff98 	bl	8000c9c <HAL_InitTick>
 8003d6c:	4603      	mov	r3, r0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	04c4b400 	.word	0x04c4b400
 8003d84:	08005064 	.word	0x08005064
 8003d88:	20000024 	.word	0x20000024
 8003d8c:	20000028 	.word	0x20000028

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d96:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d102      	bne.n	8003da8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003da2:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	e047      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003da8:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d102      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003db4:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	e03e      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003dba:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b0c      	cmp	r3, #12
 8003dc4:	d136      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dc6:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d10c      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003de4:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dee:	68d2      	ldr	r2, [r2, #12]
 8003df0:	0a12      	lsrs	r2, r2, #8
 8003df2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	617b      	str	r3, [r7, #20]
      break;
 8003dfc:	e00c      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dfe:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e06:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e08:	68d2      	ldr	r2, [r2, #12]
 8003e0a:	0a12      	lsrs	r2, r2, #8
 8003e0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e10:	fb02 f303 	mul.w	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]
      break;
 8003e16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	0e5b      	lsrs	r3, r3, #25
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	3301      	adds	r3, #1
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	e001      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e38:	693b      	ldr	r3, [r7, #16]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	00f42400 	.word	0x00f42400
 8003e50:	016e3600 	.word	0x016e3600

08003e54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000024 	.word	0x20000024

08003e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e70:	f7ff fff0 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	4904      	ldr	r1, [pc, #16]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	08005074 	.word	0x08005074

08003e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e9c:	f7ff ffda 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0adb      	lsrs	r3, r3, #11
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	08005074 	.word	0x08005074

08003ec4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	3301      	adds	r3, #1
 8003ee0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d10c      	bne.n	8003f02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ee8:	4a17      	ldr	r2, [pc, #92]	; (8003f48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ef2:	68d2      	ldr	r2, [r2, #12]
 8003ef4:	0a12      	lsrs	r2, r2, #8
 8003ef6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	617b      	str	r3, [r7, #20]
    break;
 8003f00:	e00c      	b.n	8003f1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f02:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f0c:	68d2      	ldr	r2, [r2, #12]
 8003f0e:	0a12      	lsrs	r2, r2, #8
 8003f10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f14:	fb02 f303 	mul.w	r3, r2, r3
 8003f18:	617b      	str	r3, [r7, #20]
    break;
 8003f1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	0e5b      	lsrs	r3, r3, #25
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	3301      	adds	r3, #1
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f36:	687b      	ldr	r3, [r7, #4]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	40021000 	.word	0x40021000
 8003f48:	016e3600 	.word	0x016e3600
 8003f4c:	00f42400 	.word	0x00f42400

08003f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8098 	beq.w	800409e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f72:	4b43      	ldr	r3, [pc, #268]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10d      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	4b40      	ldr	r3, [pc, #256]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	4a3f      	ldr	r2, [pc, #252]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6593      	str	r3, [r2, #88]	; 0x58
 8003f8a:	4b3d      	ldr	r3, [pc, #244]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f96:	2301      	movs	r3, #1
 8003f98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f9a:	4b3a      	ldr	r3, [pc, #232]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a39      	ldr	r2, [pc, #228]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fa6:	f7fc fec5 	bl	8000d34 <HAL_GetTick>
 8003faa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fac:	e009      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fae:	f7fc fec1 	bl	8000d34 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d902      	bls.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	74fb      	strb	r3, [r7, #19]
        break;
 8003fc0:	e005      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc2:	4b30      	ldr	r3, [pc, #192]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0ef      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003fce:	7cfb      	ldrb	r3, [r7, #19]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d159      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01e      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d019      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ff0:	4b23      	ldr	r3, [pc, #140]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ffc:	4b20      	ldr	r3, [pc, #128]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004002:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800400c:	4b1c      	ldr	r3, [pc, #112]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800401c:	4a18      	ldr	r2, [pc, #96]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fc fe81 	bl	8000d34 <HAL_GetTick>
 8004032:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004034:	e00b      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fc fe7d 	bl	8000d34 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	; 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d902      	bls.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	74fb      	strb	r3, [r7, #19]
            break;
 800404c:	e006      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ec      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004070:	4903      	ldr	r1, [pc, #12]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004078:	e008      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800407a:	7cfb      	ldrb	r3, [r7, #19]
 800407c:	74bb      	strb	r3, [r7, #18]
 800407e:	e005      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004080:	40021000 	.word	0x40021000
 8004084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	7cfb      	ldrb	r3, [r7, #19]
 800408a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408c:	7c7b      	ldrb	r3, [r7, #17]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004092:	4ba7      	ldr	r3, [pc, #668]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004096:	4aa6      	ldr	r2, [pc, #664]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040aa:	4ba1      	ldr	r3, [pc, #644]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b0:	f023 0203 	bic.w	r2, r3, #3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	499d      	ldr	r1, [pc, #628]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040cc:	4b98      	ldr	r3, [pc, #608]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f023 020c 	bic.w	r2, r3, #12
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	4995      	ldr	r1, [pc, #596]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ee:	4b90      	ldr	r3, [pc, #576]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	498c      	ldr	r1, [pc, #560]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004110:	4b87      	ldr	r3, [pc, #540]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	4984      	ldr	r1, [pc, #528]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004132:	4b7f      	ldr	r3, [pc, #508]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	497b      	ldr	r1, [pc, #492]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004154:	4b76      	ldr	r3, [pc, #472]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	4973      	ldr	r1, [pc, #460]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004176:	4b6e      	ldr	r3, [pc, #440]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	496a      	ldr	r1, [pc, #424]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004198:	4b65      	ldr	r3, [pc, #404]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	4962      	ldr	r1, [pc, #392]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041ba:	4b5d      	ldr	r3, [pc, #372]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	4959      	ldr	r1, [pc, #356]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041dc:	4b54      	ldr	r3, [pc, #336]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041e2:	f023 0203 	bic.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	4951      	ldr	r1, [pc, #324]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041fe:	4b4c      	ldr	r3, [pc, #304]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004204:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	4948      	ldr	r1, [pc, #288]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421c:	2b00      	cmp	r3, #0
 800421e:	d015      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004220:	4b43      	ldr	r3, [pc, #268]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	4940      	ldr	r1, [pc, #256]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423e:	d105      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004240:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a3a      	ldr	r2, [pc, #232]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800424a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004258:	4b35      	ldr	r3, [pc, #212]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	4932      	ldr	r1, [pc, #200]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004276:	d105      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004278:	4b2d      	ldr	r3, [pc, #180]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a2c      	ldr	r2, [pc, #176]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004282:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004290:	4b27      	ldr	r3, [pc, #156]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	4924      	ldr	r1, [pc, #144]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042ae:	d105      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b0:	4b1f      	ldr	r3, [pc, #124]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d015      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	4916      	ldr	r1, [pc, #88]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e6:	d105      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a10      	ldr	r2, [pc, #64]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d019      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	4908      	ldr	r1, [pc, #32]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800431e:	d109      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a02      	ldr	r2, [pc, #8]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800432a:	60d3      	str	r3, [r2, #12]
 800432c:	e002      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800432e:	bf00      	nop
 8004330:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004340:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	4926      	ldr	r1, [pc, #152]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800435e:	d105      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004360:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	4a20      	ldr	r2, [pc, #128]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d015      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004378:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004386:	4918      	ldr	r1, [pc, #96]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d105      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004398:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4a12      	ldr	r2, [pc, #72]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800439e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d015      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043b0:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043be:	490a      	ldr	r1, [pc, #40]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ce:	d105      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80043dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000

080043ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e042      	b.n	8004484 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7fc fb65 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2224      	movs	r2, #36	; 0x24
 800441a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f82c 	bl	800448c <UART_SetConfig>
 8004434:	4603      	mov	r3, r0
 8004436:	2b01      	cmp	r3, #1
 8004438:	d101      	bne.n	800443e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e022      	b.n	8004484 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fb1c 	bl	8004a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800445a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800446a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fba3 	bl	8004bc8 <UART_CheckIdleState>
 8004482:	4603      	mov	r3, r0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800448c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004490:	b08c      	sub	sp, #48	; 0x30
 8004492:	af00      	add	r7, sp, #0
 8004494:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	431a      	orrs	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4baa      	ldr	r3, [pc, #680]	; (8004764 <UART_SetConfig+0x2d8>)
 80044bc:	4013      	ands	r3, r2
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a9f      	ldr	r2, [pc, #636]	; (8004768 <UART_SetConfig+0x2dc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f4:	4313      	orrs	r3, r2
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004502:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800450c:	430b      	orrs	r3, r1
 800450e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	f023 010f 	bic.w	r1, r3, #15
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a90      	ldr	r2, [pc, #576]	; (800476c <UART_SetConfig+0x2e0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d125      	bne.n	800457c <UART_SetConfig+0xf0>
 8004530:	4b8f      	ldr	r3, [pc, #572]	; (8004770 <UART_SetConfig+0x2e4>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b03      	cmp	r3, #3
 800453c:	d81a      	bhi.n	8004574 <UART_SetConfig+0xe8>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0xb8>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	08004555 	.word	0x08004555
 8004548:	08004565 	.word	0x08004565
 800454c:	0800455d 	.word	0x0800455d
 8004550:	0800456d 	.word	0x0800456d
 8004554:	2301      	movs	r3, #1
 8004556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800455a:	e116      	b.n	800478a <UART_SetConfig+0x2fe>
 800455c:	2302      	movs	r3, #2
 800455e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004562:	e112      	b.n	800478a <UART_SetConfig+0x2fe>
 8004564:	2304      	movs	r3, #4
 8004566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800456a:	e10e      	b.n	800478a <UART_SetConfig+0x2fe>
 800456c:	2308      	movs	r3, #8
 800456e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004572:	e10a      	b.n	800478a <UART_SetConfig+0x2fe>
 8004574:	2310      	movs	r3, #16
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457a:	e106      	b.n	800478a <UART_SetConfig+0x2fe>
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a7c      	ldr	r2, [pc, #496]	; (8004774 <UART_SetConfig+0x2e8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d138      	bne.n	80045f8 <UART_SetConfig+0x16c>
 8004586:	4b7a      	ldr	r3, [pc, #488]	; (8004770 <UART_SetConfig+0x2e4>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	f003 030c 	and.w	r3, r3, #12
 8004590:	2b0c      	cmp	r3, #12
 8004592:	d82d      	bhi.n	80045f0 <UART_SetConfig+0x164>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0x110>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045d1 	.word	0x080045d1
 80045a0:	080045f1 	.word	0x080045f1
 80045a4:	080045f1 	.word	0x080045f1
 80045a8:	080045f1 	.word	0x080045f1
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	080045f1 	.word	0x080045f1
 80045b4:	080045f1 	.word	0x080045f1
 80045b8:	080045f1 	.word	0x080045f1
 80045bc:	080045d9 	.word	0x080045d9
 80045c0:	080045f1 	.word	0x080045f1
 80045c4:	080045f1 	.word	0x080045f1
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045e9 	.word	0x080045e9
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d6:	e0d8      	b.n	800478a <UART_SetConfig+0x2fe>
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045de:	e0d4      	b.n	800478a <UART_SetConfig+0x2fe>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e6:	e0d0      	b.n	800478a <UART_SetConfig+0x2fe>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ee:	e0cc      	b.n	800478a <UART_SetConfig+0x2fe>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045f6:	e0c8      	b.n	800478a <UART_SetConfig+0x2fe>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a5e      	ldr	r2, [pc, #376]	; (8004778 <UART_SetConfig+0x2ec>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d125      	bne.n	800464e <UART_SetConfig+0x1c2>
 8004602:	4b5b      	ldr	r3, [pc, #364]	; (8004770 <UART_SetConfig+0x2e4>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	d016      	beq.n	800463e <UART_SetConfig+0x1b2>
 8004610:	2b30      	cmp	r3, #48	; 0x30
 8004612:	d818      	bhi.n	8004646 <UART_SetConfig+0x1ba>
 8004614:	2b20      	cmp	r3, #32
 8004616:	d00a      	beq.n	800462e <UART_SetConfig+0x1a2>
 8004618:	2b20      	cmp	r3, #32
 800461a:	d814      	bhi.n	8004646 <UART_SetConfig+0x1ba>
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <UART_SetConfig+0x19a>
 8004620:	2b10      	cmp	r3, #16
 8004622:	d008      	beq.n	8004636 <UART_SetConfig+0x1aa>
 8004624:	e00f      	b.n	8004646 <UART_SetConfig+0x1ba>
 8004626:	2300      	movs	r3, #0
 8004628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800462c:	e0ad      	b.n	800478a <UART_SetConfig+0x2fe>
 800462e:	2302      	movs	r3, #2
 8004630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004634:	e0a9      	b.n	800478a <UART_SetConfig+0x2fe>
 8004636:	2304      	movs	r3, #4
 8004638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800463c:	e0a5      	b.n	800478a <UART_SetConfig+0x2fe>
 800463e:	2308      	movs	r3, #8
 8004640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004644:	e0a1      	b.n	800478a <UART_SetConfig+0x2fe>
 8004646:	2310      	movs	r3, #16
 8004648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800464c:	e09d      	b.n	800478a <UART_SetConfig+0x2fe>
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a4a      	ldr	r2, [pc, #296]	; (800477c <UART_SetConfig+0x2f0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d125      	bne.n	80046a4 <UART_SetConfig+0x218>
 8004658:	4b45      	ldr	r3, [pc, #276]	; (8004770 <UART_SetConfig+0x2e4>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004662:	2bc0      	cmp	r3, #192	; 0xc0
 8004664:	d016      	beq.n	8004694 <UART_SetConfig+0x208>
 8004666:	2bc0      	cmp	r3, #192	; 0xc0
 8004668:	d818      	bhi.n	800469c <UART_SetConfig+0x210>
 800466a:	2b80      	cmp	r3, #128	; 0x80
 800466c:	d00a      	beq.n	8004684 <UART_SetConfig+0x1f8>
 800466e:	2b80      	cmp	r3, #128	; 0x80
 8004670:	d814      	bhi.n	800469c <UART_SetConfig+0x210>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <UART_SetConfig+0x1f0>
 8004676:	2b40      	cmp	r3, #64	; 0x40
 8004678:	d008      	beq.n	800468c <UART_SetConfig+0x200>
 800467a:	e00f      	b.n	800469c <UART_SetConfig+0x210>
 800467c:	2300      	movs	r3, #0
 800467e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004682:	e082      	b.n	800478a <UART_SetConfig+0x2fe>
 8004684:	2302      	movs	r3, #2
 8004686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468a:	e07e      	b.n	800478a <UART_SetConfig+0x2fe>
 800468c:	2304      	movs	r3, #4
 800468e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004692:	e07a      	b.n	800478a <UART_SetConfig+0x2fe>
 8004694:	2308      	movs	r3, #8
 8004696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469a:	e076      	b.n	800478a <UART_SetConfig+0x2fe>
 800469c:	2310      	movs	r3, #16
 800469e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046a2:	e072      	b.n	800478a <UART_SetConfig+0x2fe>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a35      	ldr	r2, [pc, #212]	; (8004780 <UART_SetConfig+0x2f4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d12a      	bne.n	8004704 <UART_SetConfig+0x278>
 80046ae:	4b30      	ldr	r3, [pc, #192]	; (8004770 <UART_SetConfig+0x2e4>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046bc:	d01a      	beq.n	80046f4 <UART_SetConfig+0x268>
 80046be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c2:	d81b      	bhi.n	80046fc <UART_SetConfig+0x270>
 80046c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c8:	d00c      	beq.n	80046e4 <UART_SetConfig+0x258>
 80046ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ce:	d815      	bhi.n	80046fc <UART_SetConfig+0x270>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <UART_SetConfig+0x250>
 80046d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d8:	d008      	beq.n	80046ec <UART_SetConfig+0x260>
 80046da:	e00f      	b.n	80046fc <UART_SetConfig+0x270>
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e2:	e052      	b.n	800478a <UART_SetConfig+0x2fe>
 80046e4:	2302      	movs	r3, #2
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ea:	e04e      	b.n	800478a <UART_SetConfig+0x2fe>
 80046ec:	2304      	movs	r3, #4
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f2:	e04a      	b.n	800478a <UART_SetConfig+0x2fe>
 80046f4:	2308      	movs	r3, #8
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046fa:	e046      	b.n	800478a <UART_SetConfig+0x2fe>
 80046fc:	2310      	movs	r3, #16
 80046fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004702:	e042      	b.n	800478a <UART_SetConfig+0x2fe>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a17      	ldr	r2, [pc, #92]	; (8004768 <UART_SetConfig+0x2dc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d13a      	bne.n	8004784 <UART_SetConfig+0x2f8>
 800470e:	4b18      	ldr	r3, [pc, #96]	; (8004770 <UART_SetConfig+0x2e4>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800471c:	d01a      	beq.n	8004754 <UART_SetConfig+0x2c8>
 800471e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004722:	d81b      	bhi.n	800475c <UART_SetConfig+0x2d0>
 8004724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004728:	d00c      	beq.n	8004744 <UART_SetConfig+0x2b8>
 800472a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800472e:	d815      	bhi.n	800475c <UART_SetConfig+0x2d0>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <UART_SetConfig+0x2b0>
 8004734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004738:	d008      	beq.n	800474c <UART_SetConfig+0x2c0>
 800473a:	e00f      	b.n	800475c <UART_SetConfig+0x2d0>
 800473c:	2300      	movs	r3, #0
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004742:	e022      	b.n	800478a <UART_SetConfig+0x2fe>
 8004744:	2302      	movs	r3, #2
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474a:	e01e      	b.n	800478a <UART_SetConfig+0x2fe>
 800474c:	2304      	movs	r3, #4
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004752:	e01a      	b.n	800478a <UART_SetConfig+0x2fe>
 8004754:	2308      	movs	r3, #8
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800475a:	e016      	b.n	800478a <UART_SetConfig+0x2fe>
 800475c:	2310      	movs	r3, #16
 800475e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004762:	e012      	b.n	800478a <UART_SetConfig+0x2fe>
 8004764:	cfff69f3 	.word	0xcfff69f3
 8004768:	40008000 	.word	0x40008000
 800476c:	40013800 	.word	0x40013800
 8004770:	40021000 	.word	0x40021000
 8004774:	40004400 	.word	0x40004400
 8004778:	40004800 	.word	0x40004800
 800477c:	40004c00 	.word	0x40004c00
 8004780:	40005000 	.word	0x40005000
 8004784:	2310      	movs	r3, #16
 8004786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4aae      	ldr	r2, [pc, #696]	; (8004a48 <UART_SetConfig+0x5bc>)
 8004790:	4293      	cmp	r3, r2
 8004792:	f040 8097 	bne.w	80048c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004796:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800479a:	2b08      	cmp	r3, #8
 800479c:	d823      	bhi.n	80047e6 <UART_SetConfig+0x35a>
 800479e:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <UART_SetConfig+0x318>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047e7 	.word	0x080047e7
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047e7 	.word	0x080047e7
 80047b4:	080047d7 	.word	0x080047d7
 80047b8:	080047e7 	.word	0x080047e7
 80047bc:	080047e7 	.word	0x080047e7
 80047c0:	080047e7 	.word	0x080047e7
 80047c4:	080047df 	.word	0x080047df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c8:	f7ff fb50 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 80047cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047ce:	e010      	b.n	80047f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d0:	4b9e      	ldr	r3, [pc, #632]	; (8004a4c <UART_SetConfig+0x5c0>)
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047d4:	e00d      	b.n	80047f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047d6:	f7ff fadb 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 80047da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047dc:	e009      	b.n	80047f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047e4:	e005      	b.n	80047f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80047f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8130 	beq.w	8004a5a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	4a94      	ldr	r2, [pc, #592]	; (8004a50 <UART_SetConfig+0x5c4>)
 8004800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004804:	461a      	mov	r2, r3
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	fbb3 f3f2 	udiv	r3, r3, r2
 800480c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4413      	add	r3, r2
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	429a      	cmp	r2, r3
 800481c:	d305      	bcc.n	800482a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	429a      	cmp	r2, r3
 8004828:	d903      	bls.n	8004832 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004830:	e113      	b.n	8004a5a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	2200      	movs	r2, #0
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	60fa      	str	r2, [r7, #12]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	4a84      	ldr	r2, [pc, #528]	; (8004a50 <UART_SetConfig+0x5c4>)
 8004840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004844:	b29b      	uxth	r3, r3
 8004846:	2200      	movs	r2, #0
 8004848:	603b      	str	r3, [r7, #0]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004850:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004854:	f7fb fce0 	bl	8000218 <__aeabi_uldivmod>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4610      	mov	r0, r2
 800485e:	4619      	mov	r1, r3
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	020b      	lsls	r3, r1, #8
 800486a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800486e:	0202      	lsls	r2, r0, #8
 8004870:	6979      	ldr	r1, [r7, #20]
 8004872:	6849      	ldr	r1, [r1, #4]
 8004874:	0849      	lsrs	r1, r1, #1
 8004876:	2000      	movs	r0, #0
 8004878:	460c      	mov	r4, r1
 800487a:	4605      	mov	r5, r0
 800487c:	eb12 0804 	adds.w	r8, r2, r4
 8004880:	eb43 0905 	adc.w	r9, r3, r5
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	469a      	mov	sl, r3
 800488c:	4693      	mov	fp, r2
 800488e:	4652      	mov	r2, sl
 8004890:	465b      	mov	r3, fp
 8004892:	4640      	mov	r0, r8
 8004894:	4649      	mov	r1, r9
 8004896:	f7fb fcbf 	bl	8000218 <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4613      	mov	r3, r2
 80048a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048a8:	d308      	bcc.n	80048bc <UART_SetConfig+0x430>
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b0:	d204      	bcs.n	80048bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6a3a      	ldr	r2, [r7, #32]
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	e0ce      	b.n	8004a5a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048c2:	e0ca      	b.n	8004a5a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048cc:	d166      	bne.n	800499c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80048ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d827      	bhi.n	8004926 <UART_SetConfig+0x49a>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x450>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004927 	.word	0x08004927
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004927 	.word	0x08004927
 80048f4:	08004927 	.word	0x08004927
 80048f8:	08004927 	.word	0x08004927
 80048fc:	0800491f 	.word	0x0800491f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7ff fab4 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8004904:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004906:	e014      	b.n	8004932 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7ff fac6 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 800490c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800490e:	e010      	b.n	8004932 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004910:	4b4e      	ldr	r3, [pc, #312]	; (8004a4c <UART_SetConfig+0x5c0>)
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004914:	e00d      	b.n	8004932 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004916:	f7ff fa3b 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 800491a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800491c:	e009      	b.n	8004932 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004924:	e005      	b.n	8004932 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004930:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8090 	beq.w	8004a5a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	4a44      	ldr	r2, [pc, #272]	; (8004a50 <UART_SetConfig+0x5c4>)
 8004940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004944:	461a      	mov	r2, r3
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	fbb3 f3f2 	udiv	r3, r3, r2
 800494c:	005a      	lsls	r2, r3, #1
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	085b      	lsrs	r3, r3, #1
 8004954:	441a      	add	r2, r3
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	fbb2 f3f3 	udiv	r3, r2, r3
 800495e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	2b0f      	cmp	r3, #15
 8004964:	d916      	bls.n	8004994 <UART_SetConfig+0x508>
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496c:	d212      	bcs.n	8004994 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	b29b      	uxth	r3, r3
 8004972:	f023 030f 	bic.w	r3, r3, #15
 8004976:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	b29b      	uxth	r3, r3
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	b29a      	uxth	r2, r3
 8004984:	8bfb      	ldrh	r3, [r7, #30]
 8004986:	4313      	orrs	r3, r2
 8004988:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	8bfa      	ldrh	r2, [r7, #30]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	e062      	b.n	8004a5a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800499a:	e05e      	b.n	8004a5a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800499c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d828      	bhi.n	80049f6 <UART_SetConfig+0x56a>
 80049a4:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <UART_SetConfig+0x520>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049d9 	.word	0x080049d9
 80049b4:	080049e1 	.word	0x080049e1
 80049b8:	080049f7 	.word	0x080049f7
 80049bc:	080049e7 	.word	0x080049e7
 80049c0:	080049f7 	.word	0x080049f7
 80049c4:	080049f7 	.word	0x080049f7
 80049c8:	080049f7 	.word	0x080049f7
 80049cc:	080049ef 	.word	0x080049ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d0:	f7ff fa4c 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 80049d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049d6:	e014      	b.n	8004a02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d8:	f7ff fa5e 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 80049dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049de:	e010      	b.n	8004a02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e0:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <UART_SetConfig+0x5c0>)
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049e4:	e00d      	b.n	8004a02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e6:	f7ff f9d3 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 80049ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049ec:	e009      	b.n	8004a02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049f4:	e005      	b.n	8004a02 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a00:	bf00      	nop
    }

    if (pclk != 0U)
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d028      	beq.n	8004a5a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	4a10      	ldr	r2, [pc, #64]	; (8004a50 <UART_SetConfig+0x5c4>)
 8004a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a12:	461a      	mov	r2, r3
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	085b      	lsrs	r3, r3, #1
 8004a20:	441a      	add	r2, r3
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	2b0f      	cmp	r3, #15
 8004a30:	d910      	bls.n	8004a54 <UART_SetConfig+0x5c8>
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d20c      	bcs.n	8004a54 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60da      	str	r2, [r3, #12]
 8004a44:	e009      	b.n	8004a5a <UART_SetConfig+0x5ce>
 8004a46:	bf00      	nop
 8004a48:	40008000 	.word	0x40008000
 8004a4c:	00f42400 	.word	0x00f42400
 8004a50:	0800507c 	.word	0x0800507c
      }
      else
      {
        ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2200      	movs	r2, #0
 8004a74:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3730      	adds	r7, #48	; 0x30
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01a      	beq.n	8004b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b82:	d10a      	bne.n	8004b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	605a      	str	r2, [r3, #4]
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bd8:	f7fc f8ac 	bl	8000d34 <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d10e      	bne.n	8004c0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f82f 	bl	8004c5e <UART_WaitOnFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e025      	b.n	8004c56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d10e      	bne.n	8004c36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f819 	bl	8004c5e <UART_WaitOnFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e00f      	b.n	8004c56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b09c      	sub	sp, #112	; 0x70
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6e:	e0a9      	b.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	f000 80a5 	beq.w	8004dc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7a:	f7fc f85b 	bl	8000d34 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d302      	bcc.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d140      	bne.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ca4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e6      	bne.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3308      	adds	r3, #8
 8004ce0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ce2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ce4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e5      	bne.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e069      	b.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d051      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2e:	d149      	bne.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e6      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3308      	adds	r3, #8
 8004d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d8c:	623a      	str	r2, [r7, #32]
 8004d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	69f9      	ldr	r1, [r7, #28]
 8004d92:	6a3a      	ldr	r2, [r7, #32]
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e010      	b.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	f43f af46 	beq.w	8004c70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3770      	adds	r7, #112	; 0x70
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b085      	sub	sp, #20
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_UARTEx_DisableFifoMode+0x16>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e027      	b.n	8004e54 <HAL_UARTEx_DisableFifoMode+0x66>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2224      	movs	r2, #36	; 0x24
 8004e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e02d      	b.n	8004ed4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2224      	movs	r2, #36	; 0x24
 8004e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f84f 	bl	8004f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e02d      	b.n	8004f50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2224      	movs	r2, #36	; 0x24
 8004f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f811 	bl	8004f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d108      	bne.n	8004f7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f78:	e031      	b.n	8004fde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f7e:	2308      	movs	r3, #8
 8004f80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	0e5b      	lsrs	r3, r3, #25
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	0f5b      	lsrs	r3, r3, #29
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fa2:	7bbb      	ldrb	r3, [r7, #14]
 8004fa4:	7b3a      	ldrb	r2, [r7, #12]
 8004fa6:	4911      	ldr	r1, [pc, #68]	; (8004fec <UARTEx_SetNbDataToProcess+0x94>)
 8004fa8:	5c8a      	ldrb	r2, [r1, r2]
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fae:	7b3a      	ldrb	r2, [r7, #12]
 8004fb0:	490f      	ldr	r1, [pc, #60]	; (8004ff0 <UARTEx_SetNbDataToProcess+0x98>)
 8004fb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	7b7a      	ldrb	r2, [r7, #13]
 8004fc4:	4909      	ldr	r1, [pc, #36]	; (8004fec <UARTEx_SetNbDataToProcess+0x94>)
 8004fc6:	5c8a      	ldrb	r2, [r1, r2]
 8004fc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fcc:	7b7a      	ldrb	r2, [r7, #13]
 8004fce:	4908      	ldr	r1, [pc, #32]	; (8004ff0 <UARTEx_SetNbDataToProcess+0x98>)
 8004fd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	08005094 	.word	0x08005094
 8004ff0:	0800509c 	.word	0x0800509c

08004ff4 <memset>:
 8004ff4:	4402      	add	r2, r0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d100      	bne.n	8004ffe <memset+0xa>
 8004ffc:	4770      	bx	lr
 8004ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8005002:	e7f9      	b.n	8004ff8 <memset+0x4>

08005004 <__libc_init_array>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	4d0d      	ldr	r5, [pc, #52]	; (800503c <__libc_init_array+0x38>)
 8005008:	4c0d      	ldr	r4, [pc, #52]	; (8005040 <__libc_init_array+0x3c>)
 800500a:	1b64      	subs	r4, r4, r5
 800500c:	10a4      	asrs	r4, r4, #2
 800500e:	2600      	movs	r6, #0
 8005010:	42a6      	cmp	r6, r4
 8005012:	d109      	bne.n	8005028 <__libc_init_array+0x24>
 8005014:	4d0b      	ldr	r5, [pc, #44]	; (8005044 <__libc_init_array+0x40>)
 8005016:	4c0c      	ldr	r4, [pc, #48]	; (8005048 <__libc_init_array+0x44>)
 8005018:	f000 f818 	bl	800504c <_init>
 800501c:	1b64      	subs	r4, r4, r5
 800501e:	10a4      	asrs	r4, r4, #2
 8005020:	2600      	movs	r6, #0
 8005022:	42a6      	cmp	r6, r4
 8005024:	d105      	bne.n	8005032 <__libc_init_array+0x2e>
 8005026:	bd70      	pop	{r4, r5, r6, pc}
 8005028:	f855 3b04 	ldr.w	r3, [r5], #4
 800502c:	4798      	blx	r3
 800502e:	3601      	adds	r6, #1
 8005030:	e7ee      	b.n	8005010 <__libc_init_array+0xc>
 8005032:	f855 3b04 	ldr.w	r3, [r5], #4
 8005036:	4798      	blx	r3
 8005038:	3601      	adds	r6, #1
 800503a:	e7f2      	b.n	8005022 <__libc_init_array+0x1e>
 800503c:	080050ac 	.word	0x080050ac
 8005040:	080050ac 	.word	0x080050ac
 8005044:	080050ac 	.word	0x080050ac
 8005048:	080050b0 	.word	0x080050b0

0800504c <_init>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	bf00      	nop
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr

08005058 <_fini>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	bf00      	nop
 800505c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505e:	bc08      	pop	{r3}
 8005060:	469e      	mov	lr, r3
 8005062:	4770      	bx	lr
